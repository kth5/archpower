# Maintainer:
pkgname=chromium
pkgver=138.0.7204.183
pkgrel=1
pkgdesc="A web browser built for speed, simplicity, and security"
arch=('x86_64' 'powerpc64le')
url="https://www.chromium.org/Home"
license=('BSD' 'Apache-2.0' 'MIT' 'MPL-1.1' 'MPL-2.0' 'custom')
depends=(
    'gtk3'
    'libxss'
    'libxrandr'
    'alsa-lib'
    'xdg-utils'
    'libxcomposite'
    'libxdamage'
    'libxrender'
    'libxtst'
    'ca-certificates'
    'ttf-liberation'
    'nss'
    'nspr'
    'libcups'
    'libdrm'
    'libxkbcommon'
    'flac'
    'opus'
    'libpng'
    'harfbuzz'
    'libjpeg-turbo'
    'openjpeg2'
    'freetype2'
    'libxml2'
    'libxslt'
    'minizip'
    'libva'
    'wayland'
    'libxkbfile'
    'libusb'
    'libexif'
    'pciutils'
    'desktop-file-utils'
    'hicolor-icon-theme'
    'openh264'
    'snappy'
    'libxnvctrl'
)
makedepends=(
    'python'
    'gperf'
    'yasm'
    'mesa'
    'ninja'
    'clang'
    'lld'
    'gn'
    'java-runtime-headless'
    'git'
    'jq'
    'libva'
    'pipewire'
    'pipewire-pulse'
    'qt5-base'
    'nodejs-lts-iron'
    'npm'
    #'rollup'
    'rsync'
    'rust'
    'rust-bindgen'
    'libffi'
    'libxrandr'
    'libxdamage'
    'libxcomposite'
    'libcurl-gnutls'
    'libdrm'
    'libxkbcommon'
    'wayland'
    'libxkbfile'
    'libevdev'
    'libelf'
    'krb5'
    'libcap'
    'pam'
    'systemd'
    'dbus'
    'at-spi2-core'
    'egl-gbm'
    'libepoxy'
    'libxcb'
    'libxmu'
    'libxi'
    'libxfixes'
    'libxdamage'
    'libxcomposite'
    'libxrender'
    'libxtst'
    'libxrandr'
    'libxss'
    'wayland-protocols'
    'xcb-proto'
    'xorgproto'
    'ttf-liberation'
    'quilt'
)
optdepends=(
    'pipewire: WebRTC desktop sharing under Wayland'
    'kdialog: file dialogs in KDE'
    'gtk3-print-backends: printing support'
    'org.freedesktop.secrets: password storage backend on GNOME / Xfce'
    'kwallet: support for storing passwords in KWallet on KDE'
)

options=(!debug !lto)

# Source files including the patches tarball
source=(
    "http://ftp.de.debian.org/debian/pool/main/c/chromium/chromium_${pkgver}.orig.tar.xz"
    "http://ftp.de.debian.org/debian/pool/main/c/chromium/chromium_138.0.7204.183-1~deb12u1.debian.tar.xz"
    "increase-fortify-level.patch"
    "compiler-rt-adjust-paths.patch"
    "gcc-15.patch"
    "hack-emplace.patch"
    "fix-browsing-history-handler.patch"
    "fix-gcc15-codepoint-iterator.patch"
    "fix-sandboxed-vfs-file-memset.patch"
    "fix-consteval-autofill.patch"
)

# SHA256 sums - SKIP used for simplicity, should be replaced with actual checksums
sha256sums=('23f6467086bab544f6d17be62c2be5f331c6644df3ff5c91926f5e109058a20e'
            'e81d9edf4bf31e55d05f039511d718cc583650d67298ae43fc13b77aeadcdc0a'
            'd634d2ce1fc63da7ac41f432b1e84c59b7cceabf19d510848a7cff40c8025342'
            'bafb04282db0ae19d4e42e022fdccfafb424f18406e5b893475dc18bf4bd8f9e'
            '13e686cd3133d88656dcb7d5752380d2ab2385cec01ba21feb4e4d0ccae2cac6'
            'f22f5c9d3f84aee19f64d85feaf45fe0b8a6ab005e2c8efb04b6baac262a2b3b'
            'b8f4bad140449b6a3de7dff2bc59bf81ea0ed8158e17f19c050ccb4e68322ab4'
            '3237aceaa0b9e16e9ce0523060e3bd76fcd8f6b5e83f5cfabe4c2750c05aeb23'
            'be5597a3cbaf211b704450ed96090a60f3dd32f8fbe8b75879c6c909cfb33a96'
            'f4a3e5c247fca687eab5b9208cde103324d9bd38c26a5c8451e1b8f0930c7a42')

prepare() {
    cd "chromium-$pkgver"

    # Increase _FORTIFY_SOURCE level to match Arch's default flags
    patch -Np1 -i "$srcdir/increase-fortify-level.patch"
   
    patch -Np1 -i "$srcdir/compiler-rt-adjust-paths.patch"

    patch -Np1 -i "$srcdir/gcc-15.patch"
    patch -Np1 -i "$srcdir/hack-emplace.patch"
    patch -Np1 -i "$srcdir/fix-browsing-history-handler.patch"
    patch -Np1 -i "$srcdir/fix-gcc15-codepoint-iterator.patch"
    patch -Np1 -i "$srcdir/fix-sandboxed-vfs-file-memset.patch"
    patch -Np1 -i "$srcdir/fix-consteval-autofill.patch"

    QUILT_PATCHES=../debian/patches/ quilt push -af   

    # add optional stuff
    patch -Np1 -i ../debian/patches/bookworm/spaceship-operator.patch
    patch -Np1 -i ../debian/patches/bookworm/more-spaceships.patch
    patch -Np1 -i ../debian/patches/bookworm/lex-3way.patch
    patch -Np1 -i ../debian/patches/bookworm/constexpr-assert.patch
    patch -Np1 -i ../debian/patches/bookworm/constexpr2.patch
    patch -Np1 -i ../debian/patches/bookworm/constexpr3.patch
    patch -Np1 -i ../debian/patches/bookworm/constflatset.patch
    patch -Np1 -i ../debian/patches/bookworm/sizet.patch
    patch -Np1 -i ../debian/patches/bookworm/traitors.patch
    patch -Np1 -i ../debian/patches/bookworm/urlhelper-ctor.patch
    patch -Np1 -i ../debian/patches/bookworm/v8-wrappable.patch
    patch -Np1 -i ../debian/patches/fixes/stdatomic.patch
    patch -Np1 -i ../debian/patches/bookworm/v8-wrappable.patch

    # roll back debian specific changes
    patch -Np1 -R -i ../debian/patches/debianization/clang-version.patch
    patch -Np1 -R -i ../debian/patches/debianization/cross-build.patch
    patch -Np1 -R -i ../debian/patches/system/rollup.patch
    patch -Np1 -R -i ../debian/patches/bookworm/adler1.patch
    patch -Np1 -R -i ../debian/patches/system/eu-strip.patch
    patch -Np1 -R -i ../debian/patches/bookworm/libxml-parseerr.patch

    # Allow building against system libraries in official builds
    sed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
      tools/generate_shim_headers/generate_shim_headers.py
 
    # https://crbug.com/893950
    sed -i -e 's/\<xmlMalloc\>/malloc/' -e 's/\<xmlFree\>/free/' \
           -e '1i #include <cstdlib>' \
      third_party/blink/renderer/core/xml/*.cc \
      third_party/blink/renderer/core/xml/parser/xml_document_parser.cc \
      third_party/libxml/chromium/*.cc

    # Use system node
    mkdir -p third_party/node/linux/node-linux-x64/bin
    ln -sf /usr/bin/node third_party/node/linux/node-linux-x64/bin/node

    pushd third_party/node/
    sed -i -e 's/@rollup/rollup/' -e "s/'wasm-node',//" node_modules.py
    local _rollup_ver="$(jq -r .dependencies.\"@rollup/wasm-node\" package.json)"
    jq ".dependencies.rollup=\"$_rollup_ver\"" package.json > package.json.new
    mv package.json{.new,}
    popd
    third_party/node/update_npm_deps

    pushd third_party/devtools-frontend/src
    sed -i -e 's/@rollup/rollup/' -e "s/'wasm-node',//" scripts/devtools_paths.py
    local _rollup_ver="$(jq -r .devDependencies.\"@rollup/wasm-node\" package.json)"
    jq ".devDependencies.rollup=\"$_rollup_ver\" | .devDependencies.\"@rollup/rollup-linux-${CARCH}-gnu\"=\"$_rollup_ver\""  package.json > package.json.new
    mv package.json{.new,}
    # Chromium hosts a custom registry at https://npm.skia.org/chrome-devtools/ 
    # and rejects some packages:
    # Package fs-extra with version 11.3.0 was created 108h0m0s time ago. This is less than 1 week and so failed the audit.
    sed -i /registry/d .npmrc
    # Replace direct invocation of wasm rollup
    sed -i 's\@rollup/wasm-node\rollup\' \
      inspector_overlay/BUILD.gn \
      front_end/models/live-metrics/web-vitals-injected/BUILD.gn \
      front_end/Images/BUILD.gn \
      front_end/panels/recorder/injected/BUILD.gn \
      scripts/build/ninja/bundle.gni
    popd
    python third_party/devtools-frontend/src/scripts/deps/manage_node_deps.py

    # Unbundle system libraries (similar to Debian's unbundle script)
    echo "Setting up system libraries..."
    
    # Function to unbundle a library
    unbundle_lib() {
        local lib="$1"
        local target="$2"
        
        if [[ -f "build/linux/unbundle/${lib}.gn" ]]; then
            msg2 "Unbundling $lib..."
            mkdir -p "$(dirname "$target")"
            [[ -f "$target" ]] && cp "$target" "${target}.orig"
            cp "build/linux/unbundle/${lib}.gn" "$target"
        else
            msg2 "Warning: build/linux/unbundle/${lib}.gn not found"
        fi
    }

    # Critical system libraries - unbundle these one by one
    mkdir -p build/config/freetype/

    unbundle_lib "freetype" "build/config/freetype/freetype.gni"
    unbundle_lib "fontconfig" "third_party/fontconfig/BUILD.gn"
    unbundle_lib "harfbuzz-ng" "third_party/harfbuzz-ng/harfbuzz.gni"
    unbundle_lib "libjpeg" "third_party/libjpeg.gni"
    unbundle_lib "libpng" "third_party/libpng/BUILD.gn"
    unbundle_lib "libxml" "third_party/libxml/BUILD.gn"
    unbundle_lib "opus" "third_party/opus/BUILD.gn"
    unbundle_lib "openh264" "third_party/openh264/BUILD.gn"
    unbundle_lib "double-conversion" "base/third_party/double_conversion/BUILD.gn"
    unbundle_lib "flac" "third_party/flac/BUILD.gn"
    unbundle_lib "dav1d" "third_party/dav1d/BUILD.gn"
    unbundle_lib "libevent" "base/third_party/libevent/BUILD.gn"
    unbundle_lib "libxslt" "third_party/libxslt/BUILD.gn"
    unbundle_lib "libsecret" "third_party/libsecret/BUILD.gn"
    unbundle_lib "libXNVCtrl" "third_party/angle/src/third_party/libXNVCtrl/BUILD.gn"
    unbundle_lib "snappy" "third_party/snappy/BUILD.gn"
    unbundle_lib "zlib" "third_party/zlib/BUILD.gn"
    unbundle_lib "zstd" "third_party/zstd/BUILD.gn"

    # Fix powerpc64le cross-compilation issues - only build for current arch
    msg2 "Configuring for current architecture only..."
    case "$CARCH" in
        x86_64)
            sed -i 's/powerpc64le-unknown-linux-gnu//g' build/rust/std/BUILD.gn
            ;;
        powerpc64le)
            sed -i 's/x86_64-unknown-linux-gnu//g' build/rust/std/BUILD.gn
            ;;
    esac
}

build() {
    cd "chromium-$pkgver"

    # Remove stray libc++ headers that conflict with system libstdc++
    msg2 "Cleaning up conflicting libc++ headers..."
    rm -f algorithm array vector optional
    rm -rf __algorithm __memory __compare


    # Compiler setup
    #export PATH=/usr/lib/llvm19/bin:$PATH
    export AR=ar
    export NM=nm
    export CC=clang
    export CXX=clang++
    export LD=lld

    # Rust configuration - use system rust
    export RUSTC_BOOTSTRAP=1
    
    # Get clang version for proper system toolchain configuration
    local clang_version=$(clang --version | head -1 | sed 's/clang version //' | cut -d. -f1)

    # Build flags
    export CXXFLAGS+=" -Wno-unknown-warning-option"
    export LDFLAGS+=" -Wl,--undefined-version"

    # GN arguments
    local gn_args=(
        'custom_toolchain="//build/toolchain/linux/unbundle:default"'
        'host_toolchain="//build/toolchain/linux/unbundle:default"'
        'is_official_build=true'
        'symbol_level=0'
        'is_debug=false'
        'is_cfi=false'
        'is_clang=true'
        'chrome_pgo_phase=0'
        'use_sysroot=false'
        'use_custom_libcxx=false'
        'use_libcxx_modules=false'
        'use_safe_libstdcxx=false'
        'rust_sysroot_absolute="/usr"'
        "rustc_version=\"$(rustc --version 2>/dev/null)\""
        'rust_bindgen_root="/usr"'
        'enable_rust=true'
        "clang_base_path=\"/usr\""
        "clang_version=\"${clang_version}\""
        'clang_use_chrome_plugins=false'
        'use_libjpeg_turbo=true'
        'use_system_zlib=true'
        'use_system_lcms2=true'
        'use_system_libjpeg=true'
        'use_system_libpng=true'
        'use_system_freetype=true'
        'use_system_harfbuzz=true'
        'use_system_libopenjpeg2=true'
        'use_system_libffi=true'
        'use_lld=true'
        'treat_warnings_as_errors=false'
        'disable_fieldtrial_testing_config=true'
        'safe_browsing_use_unrar=false'
        'enable_nacl=false'
        'enable_vr=false'
        'build_dawn_tests=false'
        'use_qt5=false'
        'use_qt6=false'
        'use_gio=true'
        'use_pulseaudio=true'
        'link_pulseaudio=true'
        'rtc_use_pipewire=true'
        'icu_use_data_file=true'
        'enable_widevine=true'
        'proprietary_codecs=true'
        'ffmpeg_branding="Chrome"'
        'v8_enable_backtrace=true'
        'use_thin_lto=false'
        'optimize_webui=false'
        'angle_has_histograms=false'
        'build_angle_perftests=false'
        'angle_build_tests=false'
        'enable_hangout_services_extension=false'
        'enable_iterator_debugging=false'
        'use_unofficial_version_number=false'
        'v8_enable_concurrent_mksnapshot=false'
        'use_v8_context_snapshot=false'
        #'devtools_skip_typecheck=true'
    )

    # Architecture-specific arguments
    case "$CARCH" in
        x86_64)
            gn_args+=('host_cpu="x64"' 'use_vaapi=true')
            ;;
        powerpc64le)
            gn_args+=('host_cpu="ppc64"' 'use_vaapi=true')
            ;;
    esac

    # Facilitate deterministic builds (taken from build/config/compiler/BUILD.gn)
    CFLAGS+='   -Wno-builtin-macro-redefined'
    CXXFLAGS+=' -Wno-builtin-macro-redefined'
    CPPFLAGS+=' -D__DATE__=  -D__TIME__=  -D__TIMESTAMP__='

    # Do not warn about unknown warning options
    CFLAGS+='   -Wno-unknown-warning-option'
    CXXFLAGS+=' -Wno-unknown-warning-option'

    # Completely disable C++ modules to prevent libc++ header conflicts
    CXXFLAGS+=' -fno-modules -fno-implicit-module-maps'

    # Let Chromium set its own symbol level
    CFLAGS=${CFLAGS/-g }
    CXXFLAGS=${CXXFLAGS/-g }

    # https://github.com/ungoogled-software/ungoogled-chromium-archlinux/issues/123
    CFLAGS=${CFLAGS/-fexceptions}
    CFLAGS=${CFLAGS/-fcf-protection}
    CXXFLAGS=${CXXFLAGS/-fexceptions}
    CXXFLAGS=${CXXFLAGS/-fcf-protection}

    # This appears to cause random segfaults when combined with ThinLTO
    # https://bugs.archlinux.org/task/73518
    CFLAGS=${CFLAGS/-fstack-clash-protection}
    CXXFLAGS=${CXXFLAGS/-fstack-clash-protection}

    # https://crbug.com/957519#c122
    CXXFLAGS=${CXXFLAGS/-Wp,-D_GLIBCXX_ASSERTIONS}

    #CXXFLAGS+=' -stdlib=libc++'
    #LDFLAGS+=' -stdlib=libc++ -static-libstdc++'

    # extra flags to reduce warnings that aren't very useful
    CXXFLAGS+=" -Wno-conversion -Wno-unused-function -Wno-unused-variable -Wno-unused-private-field -Wno-deprecated-declarations -Wno-unknown-pragmas"

    # do not optimize away null pointer safety checks
    CXXFLAGS+=" -fno-delete-null-pointer-checks"

    # fix altivec deperation warnings
    CXXFLAGS+=" -faltivec-src-compat=mixed -Wno-deprecated-altivec-src-compat"

    gn gen out/Release --args="${gn_args[*]}"
    ninja -j20 -C out/Release chrome chrome_sandbox content_shell #chromedriver
}

package() {
    cd "chromium-$pkgver"

    # Install main binary
    install -Dm755 out/Release/chrome "$pkgdir/usr/lib/chromium/chromium"

    # Install other binaries
    install -Dm755 out/Release/chrome_sandbox "$pkgdir/usr/lib/chromium/chrome-sandbox"
    install -Dm755 out/Release/content_shell "$pkgdir/usr/lib/chromium/chromium-shell"
    #install -Dm755 out/Release/chromedriver "$pkgdir/usr/lib/chromium/chromedriver"

    # Set proper permissions for sandbox
    chmod 4755 "$pkgdir/usr/lib/chromium/chrome-sandbox"

    # Install shared libraries
    install -Dm644 out/Release/*.bin "$pkgdir/usr/lib/chromium/" 2>/dev/null || true
    install -Dm644 out/Release/libEGL.so "$pkgdir/usr/lib/chromium/"
    install -Dm644 out/Release/libGLESv2.so "$pkgdir/usr/lib/chromium/"
    install -Dm644 out/Release/*swiftshader*.so "$pkgdir/usr/lib/chromium/" 2>/dev/null || true
    install -Dm644 out/Release/libvulkan* "$pkgdir/usr/lib/chromium/" 2>/dev/null || true
    install -Dm644 out/Release/libVk* "$pkgdir/usr/lib/chromium/" 2>/dev/null || true
    install -Dm644 out/Release/vk_swiftshader_icd.json "$pkgdir/usr/lib/chromium/" 2>/dev/null || true

    # Install pak files
    install -Dm644 out/Release/chrome_*.pak "$pkgdir/usr/lib/chromium/"
    install -Dm644 out/Release/resources.pak "$pkgdir/usr/lib/chromium/"
    
    # Install locales
    install -dm755 "$pkgdir/usr/lib/chromium/locales"
    install -Dm644 out/Release/locales/*.pak "$pkgdir/usr/lib/chromium/locales/"

    # Install other resources
    install -Dm755 out/Release/chrome_crashpad_handler "$pkgdir/usr/lib/chromium/"
    install -Dm644 out/Release/icudtl.dat "$pkgdir/usr/lib/chromium/" 2>/dev/null || true

    # Create launcher script
    install -dm755 "$pkgdir/usr/bin"
    cat > "$pkgdir/usr/bin/chromium" << 'EOF'
#!/bin/bash
# Chromium launcher script

# Allow users to override command-line options
USER_FLAGS_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/chromium-flags.conf"
if [[ -f $USER_FLAGS_FILE ]]; then
   CHROMIUM_USER_FLAGS=$(cat "$USER_FLAGS_FILE")
fi

# Launch Chromium
exec /usr/lib/chromium/chromium --no-sandbox $CHROMIUM_USER_FLAGS "$@"
EOF
    chmod 755 "$pkgdir/usr/bin/chromium"

    # Install desktop file
    install -dm755 "$pkgdir/usr/share/applications"
    cat > "$pkgdir/usr/share/applications/chromium.desktop" << 'EOF'
[Desktop Entry]
Version=1.0
Name=Chromium
GenericName=Web Browser
Comment=Access the Internet
Exec=chromium %U
StartupNotify=true
Terminal=false
Icon=chromium
Type=Application
Categories=Network;WebBrowser;
MimeType=application/pdf;application/rdf+xml;application/rss+xml;application/xhtml+xml;application/xhtml_xml;application/xml;image/gif;image/jpeg;image/png;image/webp;text/html;text/xml;x-scheme-handler/ftp;x-scheme-handler/http;x-scheme-handler/https;
Actions=new-window;new-private-window;

[Desktop Action new-window]
Name=New Window
Exec=chromium

[Desktop Action new-private-window]
Name=New Incognito Window
Exec=chromium --incognito
EOF

    # Install icons (placeholder - would need to extract from chrome binary or use system icons)
    install -dm755 "$pkgdir/usr/share/icons/hicolor/"{16x16,22x22,24x24,32x32,48x48,64x64,128x128,256x256}"/apps"
    
    # Install license
    install -Dm644 LICENSE "$pkgdir/usr/share/licenses/$pkgname/LICENSE" 2>/dev/null || true
}
