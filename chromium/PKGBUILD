# Maintainer: Evangelos Foutras <evangelos@foutrelis.com>
# Contributor: Pierre Schmitz <pierre@archlinux.de>
# Contributor: Jan "heftig" Steffens <jan.steffens@gmail.com>
# Contributor: Daniel J Griffiths <ghost1227@archlinux.us>

pkgname=chromium
pkgver=103.0.5060.53
pkgrel=1
_launcher_ver=8
_gcc_patchset=4
pkgdesc="A web browser built for speed, simplicity, and security"
arch=(x86_64 powerpc64le)
url="https://www.chromium.org/Home"
license=('BSD')
depends=('gtk3' 'nss' 'alsa-lib' 'xdg-utils' 'libxss' 'libcups' 'libgcrypt'
         'ttf-liberation' 'systemd' 'dbus' 'libpulse' 'pciutils' 'libva'
         'desktop-file-utils' 'hicolor-icon-theme')
makedepends=('python' 'gn' 'ninja' 'clang' 'lld' 'gperf' 'nodejs' 'pipewire'
             'java-runtime-headless' 'git')
optdepends=('pipewire: WebRTC desktop sharing under Wayland'
            'kdialog: support for native dialogs in Plasma'
            'org.freedesktop.secrets: password storage backend on GNOME / Xfce'
            'kwallet: support for storing passwords in KWallet on Plasma')
options=('!lto') # Chromium adds its own flags for ThinLTO
source=(https://commondatastorage.googleapis.com/chromium-browser-official/$pkgname-$pkgver.tar.xz
        https://github.com/foutrelis/chromium-launcher/archive/v$_launcher_ver/chromium-launcher-$_launcher_ver.tar.gz
        https://github.com/stha09/chromium-patches/releases/download/chromium-${pkgver%%.*}-patchset-$_gcc_patchset/chromium-${pkgver%%.*}-patchset-$_gcc_patchset.tar.xz
        roll-src-third_party-ffmpeg.patch
        chromium-libxml-unbundle.patch
        enable-GlobalMediaControlsCastStartStop.patch
        sql-make-VirtualCursor-standard-layout-type.patch
        remove-no-opaque-pointers-flag.patch
        use-oauth2-client-switches-as-default.patch
        xxx-ppc64le-4k-pages.patch
        xxx-ppc64le-libvpx.patch
        xxx-ppc64le-sandbox-linux-stat.patch
        xxx-ppc64le-support.patch
        xxx-ppc64le-swiftshader.patch
        fix-narrowing-cast.patch
        fix-gnu-libc-version-usage.patch
        fix-missing-TEMP_FAILURE_RETRY-macro.patch
        chromium-revert-drop-of-system-java.patch
        chromium-system-nodejs.patch
        unbundled-cross-toolchain.patch
        cursed^Uscoped_file.patch
        remove-sys-cdefs-includes.patch
        sandbox-membarrier.patch
        sandbox-sched_getparam.patch
        webrtc-size_t.patch
        browser-size_t.patch
        libc_malloc.patch)
sha256sums=('0ecbae14670506da90c8bf744f83f52a64a5fff0765c2e2e066b0e68b805b101'
            '213e50f48b67feb4441078d50b0fd431df34323be15be97c55302d3fdac4483a'
            'fed11a8987d9f9baa04457fb114f8f7fdb800300a3780927020865bcc43e4f52'
            '30df59a9e2d95dcb720357ec4a83d9be51e59cc5551365da4c0073e68ccdec44'
            'fd3bf124aacc45f2d0a4f1dd86303fa7f2a3d4f4eeaf33854631d6cb39e12485'
            '779fb13f2494209d3a7f1f23a823e59b9dded601866d3ab095937a1a04e19ac6'
            'b94b2e88f63cfb7087486508b8139599c89f96d7a4181c61fec4b4e250ca327a'
            '00c16ce83ea4ca924a50fa0cfc2b2a4d744c722f363b065323e6ba0fcbac45a5'
            'e393174d7695d0bafed69e868c5fbfecf07aa6969f3b64596d0bae8b067e1711'
            '3db45b777806f5b9e35f0b0b65670b87f36455a767e89e52e46905e5847940a7'
            '46512dc385451a756b8633ec9aae018c030b74582c098ab5a871f239efcabd35'
            '16361d737c14135e464bf52e09d0b79c0e9ef84c364253e08f435e8e72d7b5c9'
            '819aa82f08d00b329ffece3589fe68da7b85e7cd1e98070fcf4b10615f3719f2'
            'be9416182beb25f0835bae1dad5a26786f694dbda2e5106f83714be42add653a'
            '771395e3e84a4a1627945112b8c100c898221e04d86b76d4cff946530010e1a4'
            '320794a9d5a376e34f223805018160fb7a202d98a7c6080737e7de3b86b8d583'
            '0f945626f07a6eda7e3bea956397c79e3e67a5a4ba55e86553a9132792513fa1'
            '4f74164ad790b00389565c638bf3e752017ca7ef4bb77a86a17b6e498de501de'
            'd6dc5081c74f9025e672ea5fde6629b8d53157e0d0528e3a41004250fdf823be'
            'c25d166fdd7d7b4e1065c23955dc887a49cf78238c756e51c614999d5c48354e'
            '6cfec4a32160df642ffa4b3c1e10ba19e94f1004bac65a349fa273b0f684b8ac'
            '649640f75a3da1b5e7d9a03a4b3e71ee2bac6fda2ba62cf9535a6fc8b31f308e'
            'ba514c06cc03d728d2c1727fac85f2bbe953fe9720dcf8c2fa8de0ae4385e33b'
            'f5961ae09ddbdda69713d82e631bc3dab4884629f32f60ba201189c2c4269b39'
            '83904114e89c2b1ed55814bc07ba5a0ad198010b3cac9f223c72ac4fbac3646b'
            'd2028d47da62f054eb83ab692f8801d726f87d22c9a96e7b96c779ed0aba9287'
            '07e382665b70bb546336c0a6b73981cd14606969893f7d840c36b952891035be')

# Possible replacements are listed in build/linux/unbundle/replace_gn_files.py
# Keys are the names in the above script; values are the dependencies in Arch
declare -gA _system_libs=(
  [ffmpeg]=ffmpeg
  [flac]=flac
  [fontconfig]=fontconfig
  [freetype]=freetype2
  [harfbuzz-ng]=harfbuzz
  [icu]=icu
  [libdrm]=
  [libjpeg]=libjpeg
  [libpng]=libpng
  #[libvpx]=libvpx
  [libwebp]=libwebp
  [libxml]=libxml2
  [libxslt]=libxslt
  [opus]=opus
  [re2]=re2
  [snappy]=snappy
  [zlib]=minizip
)
_unwanted_bundled_libs=(
  $(printf "%s\n" ${!_system_libs[@]} | sed 's/^libjpeg$/&_turbo/')
)
depends+=(${_system_libs[@]})

# Google API keys (see https://www.chromium.org/developers/how-tos/api-keys)
# Note: These are for Arch Linux use ONLY. For your own distribution, please
# get your own set of keys.
#
# Starting with Chromium 89 (2021-03-02) the OAuth2 credentials have been left
# out: https://archlinux.org/news/chromium-losing-sync-support-in-early-march/
_google_api_key=AIzaSyDwr302FpOSkGRpLlUpPThNTDPbXcIn_FM

prepare() {
  cd "$srcdir/$pkgname-$pkgver"

  # Allow building against system libraries in official builds
  sed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
    tools/generate_shim_headers/generate_shim_headers.py

  # https://crbug.com/893950
  sed -i -e 's/\<xmlMalloc\>/malloc/' -e 's/\<xmlFree\>/free/' \
    third_party/blink/renderer/core/xml/*.cc \
    third_party/blink/renderer/core/xml/parser/xml_document_parser.cc \
    third_party/libxml/chromium/*.cc \
    third_party/maldoca/src/maldoca/ole/oss_utils.h

  # Use the --oauth2-client-id= and --oauth2-client-secret= switches for
  # setting GOOGLE_DEFAULT_CLIENT_ID and GOOGLE_DEFAULT_CLIENT_SECRET at
  # runtime -- this allows signing into Chromium without baked-in values
  patch -Np1 -i ../use-oauth2-client-switches-as-default.patch

  # Remove '-Xclang -no-opaque-pointers' flag not supported by our clang
  patch -Np1 -i ../remove-no-opaque-pointers-flag.patch

  # Revert kGlobalMediaControlsCastStartStop enabled by default
  # https://crbug.com/1314342
  patch -Rp1 -F3 -i ../enable-GlobalMediaControlsCastStartStop.patch

  # Revert ffmpeg roll requiring new channel layout API support
  # https://crbug.com/1325301
  patch -Rp1 -i ../roll-src-third_party-ffmpeg.patch

  # https://chromium-review.googlesource.com/c/chromium/src/+/2862724
  patch -Np1 -i ../sql-make-VirtualCursor-standard-layout-type.patch

  # Fixes for building with libstdc++ instead of libc++
  #patch -Np1 -i ../patches/

  # powerpc64le
  patch -Np1 -i ${srcdir}/xxx-ppc64le-4k-pages.patch
  patch -Np1 -i ${srcdir}/xxx-ppc64le-libvpx.patch
  patch -Np1 -i ${srcdir}/xxx-ppc64le-sandbox-linux-stat.patch
  patch -Np1 -i ${srcdir}/xxx-ppc64le-support.patch
  patch -Np1 -i ${srcdir}/xxx-ppc64le-swiftshader.patch
  patch -Np1 -i ${srcdir}/fix-narrowing-cast.patch
  patch -Np1 -i ${srcdir}/fix-gnu-libc-version-usage.patch
  patch -Np1 -i ${srcdir}/fix-missing-TEMP_FAILURE_RETRY-macro.patch
  patch -Np1 -i ${srcdir}/chromium-revert-drop-of-system-java.patch
  patch -Np1 -i ${srcdir}/chromium-system-nodejs.patch
  patch -Np1 -i ${srcdir}/unbundled-cross-toolchain.patch
  patch -Np1 -i ${srcdir}/cursed^Uscoped_file.patch
  patch -Np1 -i ${srcdir}/remove-sys-cdefs-includes.patch
  patch -Np1 -i ${srcdir}/sandbox-membarrier.patch
  patch -Np1 -i ${srcdir}/sandbox-sched_getparam.patch
  patch -Np1 -i ${srcdir}/webrtc-size_t.patch
  patch -Np1 -i ${srcdir}/browser-size_t.patch
  patch -Np1 -i ${srcdir}/libc_malloc.patch

  # Link to system tools required by the build
  mkdir -p third_party/node/linux/node-linux-x64/bin
  ln -s /usr/bin/node third_party/node/linux/node-linux-x64/bin/
  mkdir -p third_party/node/linux/node-linux-ppc64/bin
  ln -s /usr/bin/node third_party/node/linux/node-linux-ppc64/bin/
  ln -s /usr/bin/java third_party/jdk/current/bin/

  # Remove bundled libraries for which we will use the system copies; this
  # *should* do what the remove_bundled_libraries.py script does, with the
  # added benefit of not having to list all the remaining libraries
  local _lib
  for _lib in ${_unwanted_bundled_libs[@]}; do
    find "third_party/$_lib" -type f \
      \! -path "third_party/$_lib/chromium/*" \
      \! -path "third_party/$_lib/google/*" \
      \! -path "third_party/harfbuzz-ng/utils/hb_scoped.h" \
      \! -regex '.*\.\(gn\|gni\|isolate\)' \
      -delete
  done

  python ./build/linux/unbundle/replace_gn_files.py \
    --system-libraries "${!_system_libs[@]}"

  # prevent annoying errors when regenerating gni                                                                                                                                                                                  
  sed -i 's,^update_readme$,#update_readme,' third_party/libvpx/generate_gni.sh 
  if [ "${CARCH}" = 'powerpc64le' ]; then
    pushd third_party/libvpx
    mkdir -p source/config/linux/ppc64
    ./generate_gni.sh
    popd
  fi
}

build() {
  make -C chromium-launcher-$_launcher_ver

  cd "$srcdir/$pkgname-$pkgver"

  export CC=clang
  export CXX=clang++
  export AR=ar
  export NM=nm

  local _flags=(
    'custom_toolchain="//build/toolchain/linux/unbundle:default"'
    'host_toolchain="//build/toolchain/linux/unbundle:default"'
    'is_official_build=true' # implies is_cfi=true on x86_64
    'symbol_level=0' # sufficient for backtraces on x86(_64)
    'treat_warnings_as_errors=false'
    'disable_fieldtrial_testing_config=true'
    'blink_enable_generated_code_formatting=false'
    'ffmpeg_branding="Chrome"'
    'proprietary_codecs=true'
    'rtc_use_pipewire=true'
    'link_pulseaudio=true'
    'use_gnome_keyring=false'
    'use_sysroot=false'
    'use_custom_libcxx=false'
    'enable_hangout_services_extension=true'
    'enable_widevine=true'
    'enable_nacl=false'
    "google_api_key=\"$_google_api_key\""
		'treat_warnings_as_errors=false'
		'fatal_linker_warnings=false'
  )

  if [[ -n ${_system_libs[icu]+set} ]]; then
    _flags+=(
       'icu_use_data_file=false'
       'is_clang=true'
       'use_lld=true'
       'clang_use_chrome_plugins=false'
       'clang_base_path="/usr"'
       'chrome_pgo_phase=0'
    )
  fi

  case "${CARCH}" in
    powerpc64le) _flags+=('enable_jxl_decoder=false')
  esac

  # Facilitate deterministic builds (taken from build/config/compiler/BUILD.gn)
  CFLAGS+='   -Wno-builtin-macro-redefined'
  CXXFLAGS+=' -Wno-builtin-macro-redefined'
  CPPFLAGS+=' -D__DATE__=  -D__TIME__=  -D__TIMESTAMP__='

  # Do not warn about unknown warning options
  CFLAGS+='   -Wno-unknown-warning-option'
  CXXFLAGS+=' -Wno-unknown-warning-option'

  # Let Chromium set its own symbol level
  CFLAGS=${CFLAGS/-g }
  CXXFLAGS=${CXXFLAGS/-g }

  # https://github.com/ungoogled-software/ungoogled-chromium-archlinux/issues/123
  CFLAGS=${CFLAGS/-fexceptions}
  CFLAGS=${CFLAGS/-fcf-protection}
  CXXFLAGS=${CXXFLAGS/-fexceptions}
  CXXFLAGS=${CXXFLAGS/-fcf-protection}

  # This appears to cause random segfaults when combined with ThinLTO
  # https://bugs.archlinux.org/task/73518
  CFLAGS=${CFLAGS/-fstack-clash-protection}
  CXXFLAGS=${CXXFLAGS/-fstack-clash-protection}

  # https://crbug.com/957519#c122
  CXXFLAGS=${CXXFLAGS/-Wp,-D_GLIBCXX_ASSERTIONS}

  gn gen out/Release --args="${_flags[*]}"
  ninja ${MAKEFLAGS} -C out/Release chrome chrome_sandbox chromedriver.unstripped
}

package() {
  cd chromium-launcher-$_launcher_ver
  make PREFIX=/usr DESTDIR="$pkgdir" install
  install -Dm644 LICENSE \
    "$pkgdir/usr/share/licenses/chromium/LICENSE.launcher"

  cd "$srcdir/$pkgname-$pkgver"

  install -D out/Release/chrome "$pkgdir/usr/lib/chromium/chromium"
  install -D out/Release/chromedriver.unstripped "$pkgdir/usr/bin/chromedriver"
  install -Dm4755 out/Release/chrome_sandbox "$pkgdir/usr/lib/chromium/chrome-sandbox"

  install -Dm644 chrome/installer/linux/common/desktop.template \
    "$pkgdir/usr/share/applications/chromium.desktop"
  install -Dm644 chrome/app/resources/manpage.1.in \
    "$pkgdir/usr/share/man/man1/chromium.1"
  sed -i \
    -e 's/@@MENUNAME@@/Chromium/g' \
    -e 's/@@PACKAGE@@/chromium/g' \
    -e 's/@@USR_BIN_SYMLINK_NAME@@/chromium/g' \
    "$pkgdir/usr/share/applications/chromium.desktop" \
    "$pkgdir/usr/share/man/man1/chromium.1"

  install -Dm644 chrome/installer/linux/common/chromium-browser/chromium-browser.appdata.xml \
    "$pkgdir/usr/share/metainfo/chromium.appdata.xml"
  sed -ni \
    -e 's/chromium-browser\.desktop/chromium.desktop/' \
    -e '/<update_contact>/d' \
    -e '/<p>/N;/<p>\n.*\(We invite\|Chromium supports Vorbis\)/,/<\/p>/d' \
    -e '/^<?xml/,$p' \
    "$pkgdir/usr/share/metainfo/chromium.appdata.xml"

  local toplevel_files=(
    chrome_100_percent.pak
    chrome_200_percent.pak
    chrome_crashpad_handler
    resources.pak
    v8_context_snapshot.bin

    # ANGLE
    libEGL.so
    libGLESv2.so

    # SwiftShader ICD
    libvk_swiftshader.so
    vk_swiftshader_icd.json
  )

  if [[ -z ${_system_libs[icu]+set} ]]; then
    toplevel_files+=(icudtl.dat)
  fi

  cp "${toplevel_files[@]/#/out/Release/}" "$pkgdir/usr/lib/chromium/"
  install -Dm644 -t "$pkgdir/usr/lib/chromium/locales" out/Release/locales/*.pak
  [ "${CARCH}" = 'x86_64' ] && install -Dm755 -t "$pkgdir/usr/lib/chromium/swiftshader" out/Release/swiftshader/*.so

  for size in 24 48 64 128 256; do
    install -Dm644 "chrome/app/theme/chromium/product_logo_$size.png" \
      "$pkgdir/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"
  done

  for size in 16 32; do
    install -Dm644 "chrome/app/theme/default_100_percent/chromium/product_logo_$size.png" \
      "$pkgdir/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"
  done

  install -Dm644 LICENSE "$pkgdir/usr/share/licenses/chromium/LICENSE"
}

# vim:set ts=2 sw=2 et:
