--- chromium-138.0.7204.183/cc/tiles/gpu_image_decode_cache.cc.orig	2025-08-06 09:16:20.645247920 +0200
+++ chromium-138.0.7204.183/cc/tiles/gpu_image_decode_cache.cc	2025-08-06 09:16:40.240333540 +0200
@@ -1131,7 +1131,7 @@
     last_use = base::TimeTicks::Now();
   }
   if (speculative_decode) {
-    speculative_decode_usage_stats_.emplace();
+    speculative_decode_usage_stats_ = {};
     speculative_decode_usage_stats_->speculative_decode_mip_level =
         upload_scale_mip_level;
     TRACE_EVENT_INSTANT2(TRACE_DISABLED_BY_DEFAULT("loading"),
--- chromium-138.0.7204.183/third_party/blink/renderer/core/paint/paint_layer_scrollable_area.h.orig	2025-08-08 16:32:59.375465168 +0200
+++ chromium-138.0.7204.183/third_party/blink/renderer/core/paint/paint_layer_scrollable_area.h	2025-08-08 16:33:16.598162451 +0200
@@ -604,7 +604,7 @@
       mojom::blink::ScrollBehavior scroll_behavior) override {
     if (!should_restore_scroll)
       return;
-    pending_view_state_.emplace();
+    pending_view_state_ = {};
     pending_view_state_->state = view_state;
     pending_view_state_->scroll_behavior = scroll_behavior;
   }
--- chromium-138.0.7204.183/third_party/blink/renderer/core/layout/inline/line_breaker.cc.orig	2025-08-08 17:54:50.492957360 +0200
+++ chromium-138.0.7204.183/third_party/blink/renderer/core/layout/inline/line_breaker.cc	2025-08-08 17:55:07.175317445 +0200
@@ -2729,7 +2729,7 @@
       if (!trailing_collapsible_space_.has_value() ||
           trailing_collapsible_space_->item_results != results ||
           trailing_collapsible_space_->item_result_index != index) {
-        trailing_collapsible_space_.emplace();
+        trailing_collapsible_space_ = {};
         trailing_collapsible_space_->item_results = results;
         trailing_collapsible_space_->item_result_index = index;
         if (item_result.EndOffset() - 1 > item_result.StartOffset()) {
--- chromium-138.0.7204.183/third_party/webrtc/call/rtp_config.cc
+++ chromium-138.0.7204.183/third_party/webrtc/call/rtp_config.cc
@@ -258,7 +258,8 @@
   stream_config.raw_payload = raw_payload;
   if (!rtx.ssrcs.empty()) {
     RTC_DCHECK_EQ(ssrcs.size(), rtx.ssrcs.size());
-    auto& stream_config_rtx = stream_config.rtx.emplace();
+    stream_config.rtx = {};
+    auto& stream_config_rtx = *stream_config.rtx;
     stream_config_rtx.ssrc = rtx.ssrcs[index];
     stream_config_rtx.payload_type = rtx.payload_type;
   }
--- chromium-138.0.7204.183/mojo/public/cpp/bindings/lib/multiplex_router.cc
+++ chromium-138.0.7204.183/mojo/public/cpp/bindings/lib/multiplex_router.cc
@@ -893,7 +893,7 @@
   DCHECK(!exclusive_sync_wait_);
 
   scoped_refptr<MultiplexRouter> keep_alive(this);
-  exclusive_sync_wait_.emplace();
+  exclusive_sync_wait_ = {};
   exclusive_sync_wait_->interface_id = interface_id;
   exclusive_sync_wait_->request_id = request_id;
   while (!exclusive_sync_wait_->finished) {
--- chromium-138.0.7204.183/components/viz/service/display/surface_aggregator.cc.orig	2025-08-08 19:53:45.111381919 +0200
+++ chromium-138.0.7204.183/components/viz/service/display/surface_aggregator.cc	2025-08-08 19:54:01.092656802 +0200
@@ -2162,7 +2162,7 @@
   root_surface_id_ = surface_id;
 
   // Start recording new stats for this aggregation.
-  stats_.emplace();
+  stats_ = {};
 
   base::ElapsedTimer prewalk_timer;
   ResolvedFrameData* resolved_frame = GetResolvedFrame(surface_id);
--- chromium-138.0.7204.183/chrome/browser/actor/tools/navigate_tool.cc.orig	2025-08-10 12:17:45.485847402 +0200
+++ chromium-138.0.7204.183/chrome/browser/actor/tools/navigate_tool.cc	2025-08-10 12:18:03.039425116 +0200
@@ -77,7 +77,7 @@
       return;
     }
 
-    post_navigation_state_.emplace();
+    post_navigation_state_ = {};
     content::GetUIThreadTaskRunner()->PostDelayedTask(
         FROM_HERE,
         base::BindOnce(&NavigateTool::Timeout, weak_ptr_factory_.GetWeakPtr()),
