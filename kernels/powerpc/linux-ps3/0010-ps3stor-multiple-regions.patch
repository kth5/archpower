diff -Naur a/arch/powerpc/include/asm/ps3stor.h b/arch/powerpc/include/asm/ps3stor.h
--- a/arch/powerpc/include/asm/ps3stor.h	2024-03-17 06:31:12.000000000 +0700
+++ b/arch/powerpc/include/asm/ps3stor.h	2024-03-17 19:50:21.959699054 +0700
@@ -18,6 +18,7 @@
 	unsigned int id;
 	u64 start;
 	u64 size;
+	u64 flags;
 };
 
 struct ps3_storage_device {
@@ -38,7 +39,7 @@
 
 	unsigned int num_regions;
 	unsigned long accessible_regions;
-	unsigned int region_idx;		/* first accessible region */
+
 	struct ps3_storage_region regions[];	/* Must be last */
 };
 
@@ -50,9 +51,9 @@
 extern int ps3stor_setup(struct ps3_storage_device *dev,
 			 irq_handler_t handler);
 extern void ps3stor_teardown(struct ps3_storage_device *dev);
-extern u64 ps3stor_read_write_sectors(struct ps3_storage_device *dev, u64 lpar,
-				      u64 start_sector, u64 sectors,
-				      int write);
+extern u64 ps3stor_read_write_sectors(struct ps3_storage_device *dev, u64 lpar, unsigned int region_idx,
+				      u64 start_sector, u64 sectors, u64 flags,
+ 				      int write);
 extern u64 ps3stor_send_command(struct ps3_storage_device *dev, u64 cmd,
 				u64 arg1, u64 arg2, u64 arg3, u64 arg4);
 
diff -Naur a/drivers/block/ps3disk.c b/drivers/block/ps3disk.c
--- a/drivers/block/ps3disk.c	2024-07-23 04:02:19.000000000 +0700
+++ b/drivers/block/ps3disk.c	2024-07-23 19:05:03.653340668 +0700
@@ -20,24 +20,23 @@
 
 #define BOUNCE_SIZE		(64*1024)
 
-#define PS3DISK_MAX_DISKS	16
+#define PS3DISK_MAX_NUM_REGS	8
 #define PS3DISK_MINORS		16
 
-
 #define PS3DISK_NAME		"ps3d%c"
 
-
 struct ps3disk_private {
 	spinlock_t lock;		/* Request queue spinlock */
-	struct blk_mq_tag_set tag_set;
-	struct gendisk *gendisk;
+	struct blk_mq_tag_set tag_set[PS3DISK_MAX_NUM_REGS];
+	struct gendisk *gendisk[PS3DISK_MAX_NUM_REGS];
 	unsigned int blocking_factor;
 	struct request *req;
 	u64 raw_capacity;
 	unsigned char model[ATA_ID_PROD_LEN+1];
+	unsigned int root_queue;
+	unsigned char next_queue[PS3DISK_MAX_NUM_REGS];
 };
 
-
 #define LV1_STORAGE_SEND_ATA_COMMAND	(2)
 #define LV1_STORAGE_ATA_HDDOUT		(0x23)
 
@@ -76,6 +75,13 @@
 	.owner		= THIS_MODULE,
 };
 
+static unsigned int region_flags[] =
+{
+	0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+};
+
+module_param_array(region_flags, uint, NULL, S_IRUGO);
+MODULE_PARM_DESC(region_flags, "Region flags");
 
 static void ps3disk_scatter_gather(struct ps3_storage_device *dev,
 				   struct request *req, int gather)
@@ -83,12 +89,14 @@
 	unsigned int offset = 0;
 	struct req_iterator iter;
 	struct bio_vec bvec;
-
+	size_t size;
 	rq_for_each_segment(bvec, req, iter) {
+		size = bvec.bv_len;
 		if (gather)
 			memcpy_from_bvec(dev->bounce_buf + offset, &bvec);
 		else
 			memcpy_to_bvec(&bvec, dev->bounce_buf + offset);
+		offset += size;
 	}
 }
 
@@ -99,34 +107,33 @@
 	int write = rq_data_dir(req), res;
 	const char *op = write ? "write" : "read";
 	u64 start_sector, sectors;
-	unsigned int region_id = dev->regions[dev->region_idx].id;
-
+	unsigned int region_idx = MINOR(disk_devt(req->q->disk)) / PS3DISK_MINORS;
+	unsigned int region_id = dev->regions[region_idx].id;
+	unsigned int region_flags = dev->regions[region_idx].flags;
 #ifdef DEBUG
 	unsigned int n = 0;
 	struct bio_vec bv;
 	struct req_iterator iter;
-
 	rq_for_each_segment(bv, req, iter)
 		n++;
 	dev_dbg(&dev->sbd.core,
 		"%s:%u: %s req has %u bvecs for %u sectors\n",
 		__func__, __LINE__, op, n, blk_rq_sectors(req));
 #endif
-
 	start_sector = blk_rq_pos(req) * priv->blocking_factor;
 	sectors = blk_rq_sectors(req) * priv->blocking_factor;
+#ifdef DEBUG
 	dev_dbg(&dev->sbd.core, "%s:%u: %s %llu sectors starting at %llu\n",
 		__func__, __LINE__, op, sectors, start_sector);
-
+#endif
 	if (write) {
 		ps3disk_scatter_gather(dev, req, 1);
-
 		res = lv1_storage_write(dev->sbd.dev_id, region_id,
-					start_sector, sectors, 0,
+					start_sector, sectors, region_flags,
 					dev->bounce_lpar, &dev->tag);
 	} else {
 		res = lv1_storage_read(dev->sbd.dev_id, region_id,
-				       start_sector, sectors, 0,
+					start_sector, sectors, region_flags,
 				       dev->bounce_lpar, &dev->tag);
 	}
 	if (res) {
@@ -134,7 +141,6 @@
 			__LINE__, op, res);
 		return BLK_STS_IOERR;
 	}
-
 	priv->req = req;
 	return BLK_STS_OK;
 }
@@ -144,9 +150,9 @@
 {
 	struct ps3disk_private *priv = ps3_system_bus_get_drvdata(&dev->sbd);
 	u64 res;
-
+#ifdef DEBUG
 	dev_dbg(&dev->sbd.core, "%s:%u: flush request\n", __func__, __LINE__);
-
+#endif
 	res = lv1_storage_send_device_command(dev->sbd.dev_id,
 					      LV1_STORAGE_ATA_HDDOUT, 0, 0, 0,
 					      0, &dev->tag);
@@ -155,42 +161,35 @@
 			__func__, __LINE__, res);
 		return BLK_STS_IOERR;
 	}
-
 	priv->req = req;
 	return BLK_STS_OK;
 }
 
-static blk_status_t ps3disk_do_request(struct ps3_storage_device *dev,
-				       struct request *req)
-{
-	dev_dbg(&dev->sbd.core, "%s:%u\n", __func__, __LINE__);
-
-	switch (req_op(req)) {
-	case REQ_OP_FLUSH:
-		return ps3disk_submit_flush_request(dev, req);
-	case REQ_OP_READ:
-	case REQ_OP_WRITE:
-		return ps3disk_submit_request_sg(dev, req);
-	default:
-		blk_dump_rq_flags(req, DEVICE_NAME " bad request");
-		return BLK_STS_IOERR;
-	}
-}
-
 static blk_status_t ps3disk_queue_rq(struct blk_mq_hw_ctx *hctx,
 				     const struct blk_mq_queue_data *bd)
 {
 	struct request_queue *q = hctx->queue;
 	struct ps3_storage_device *dev = q->queuedata;
 	struct ps3disk_private *priv = ps3_system_bus_get_drvdata(&dev->sbd);
-	blk_status_t ret;
-
-	blk_mq_start_request(bd->rq);
-
+	blk_status_t ret = BLK_STS_DEV_RESOURCE;	
 	spin_lock_irq(&priv->lock);
-	ret = ps3disk_do_request(dev, bd->rq);
+	if(priv->req) {
+		spin_unlock_irq(&priv->lock);
+		return ret;
+	}
+	blk_mq_start_request(bd->rq);	
+#ifdef DEBUG
+	dev_dbg(&dev->sbd.core, "%s:%u\n", __func__, __LINE__);
+#endif
+	if (req_op(bd->rq) == REQ_OP_FLUSH) {
+		ret = ps3disk_submit_flush_request(dev, bd->rq);		
+	} else if(req_op(bd->rq) == REQ_OP_READ || req_op(bd->rq) == REQ_OP_WRITE)
+		ret = ps3disk_submit_request_sg(dev, bd->rq);
+	else {
+		blk_dump_rq_flags(bd->rq, DEVICE_NAME " bad request");
+		ret = BLK_STS_IOERR;				
+	}
 	spin_unlock_irq(&priv->lock);
-
 	return ret;
 }
 
@@ -203,31 +202,30 @@
 	blk_status_t error;
 	u64 tag, status;
 	const char *op;
-
+	struct gendisk *gdisk;	
+	int region_idx;	
 	res = lv1_storage_get_async_status(dev->sbd.dev_id, &tag, &status);
-
 	if (tag != dev->tag)
 		dev_err(&dev->sbd.core,
 			"%s:%u: tag mismatch, got %llx, expected %llx\n",
 			__func__, __LINE__, tag, dev->tag);
-
 	if (res) {
 		dev_err(&dev->sbd.core, "%s:%u: res=%d status=0x%llx\n",
 			__func__, __LINE__, res, status);
 		return IRQ_HANDLED;
 	}
-
-	priv = ps3_system_bus_get_drvdata(&dev->sbd);
+	priv = ps3_system_bus_get_drvdata(&dev->sbd);	
+	spin_lock(&priv->lock);	
 	req = priv->req;
-	if (!req) {
+	if (!req) {		
 		dev_dbg(&dev->sbd.core,
 			"%s:%u non-block layer request completed\n", __func__,
 			__LINE__);
-		dev->lv1_status = status;
+		dev->lv1_status = status;		
 		complete(&dev->done);
+		spin_unlock(&priv->lock);
 		return IRQ_HANDLED;
 	}
-
 	if (req_op(req) == REQ_OP_FLUSH) {
 		read = 0;
 		op = "flush";
@@ -240,28 +238,32 @@
 			__LINE__, op, status);
 		error = BLK_STS_IOERR;
 	} else {
+#ifdef DEBUG
 		dev_dbg(&dev->sbd.core, "%s:%u: %s completed\n", __func__,
 			__LINE__, op);
+#endif
 		error = 0;
-		if (read)
+		if (read) 
 			ps3disk_scatter_gather(dev, req, 0);
 	}
-
-	spin_lock(&priv->lock);
-	priv->req = NULL;
-	blk_mq_end_request(req, error);
-	spin_unlock(&priv->lock);
-
-	blk_mq_run_hw_queues(priv->gendisk->queue, true);
+	priv->req = NULL;	
+	blk_mq_end_request(req, error);	
+	region_idx = priv->root_queue;	
+	do {
+		gdisk = priv->gendisk[region_idx];
+		if(gdisk) 
+			blk_mq_run_hw_queues(gdisk->queue, true);			
+		region_idx = priv->next_queue[region_idx];
+	} while (region_idx != priv->root_queue);
+	priv->root_queue = priv->next_queue[priv->root_queue];
+	spin_unlock(&priv->lock);	
 	return IRQ_HANDLED;
 }
 
 static int ps3disk_sync_cache(struct ps3_storage_device *dev)
 {
 	u64 res;
-
 	dev_dbg(&dev->sbd.core, "%s:%u: sync cache\n", __func__, __LINE__);
-
 	res = ps3stor_send_command(dev, LV1_STORAGE_ATA_HDDOUT, 0, 0, 0, 0);
 	if (res) {
 		dev_err(&dev->sbd.core, "%s:%u: sync cache failed 0x%llx\n",
@@ -278,7 +280,6 @@
 {
 #ifdef __BIG_ENDIAN
 	unsigned int i;
-
 	for (i = 0; i < buf_words; i++)
 		buf[i] = le16_to_cpu(buf[i]);
 #endif /* __BIG_ENDIAN */
@@ -303,16 +304,13 @@
 			  unsigned int len)
 {
 	unsigned int c;
-
 	while (len > 0) {
 		c = id[ofs] >> 8;
 		*s = c;
 		s++;
-
 		c = id[ofs] & 0xff;
 		*s = c;
 		s++;
-
 		ofs++;
 		len -= 2;
 	}
@@ -322,14 +320,10 @@
 			    unsigned int len)
 {
 	unsigned char *p;
-
 	WARN_ON(!(len & 1));
-
 	ata_id_string(id, s, ofs, len - 1);
-
 	p = s + strnlen(s, len - 1);
-	while (p > s && p[-1] == ' ')
-		p--;
+	while (p > s && p[-1] == ' ') p--;
 	*p = '\0';
 }
 
@@ -339,9 +333,7 @@
 	struct lv1_ata_cmnd_block ata_cmnd;
 	u16 *id = dev->bounce_buf;
 	u64 res;
-
 	dev_dbg(&dev->sbd.core, "%s:%u: identify disk\n", __func__, __LINE__);
-
 	memset(&ata_cmnd, 0, sizeof(struct lv1_ata_cmnd_block));
 	ata_cmnd.command = ATA_CMD_ID_ATA;
 	ata_cmnd.sector_count = 1;
@@ -349,7 +341,6 @@
 	ata_cmnd.buffer = dev->bounce_lpar;
 	ata_cmnd.proto = PIO_DATA_IN_PROTO;
 	ata_cmnd.in_out = DIR_READ;
-
 	res = ps3stor_send_command(dev, LV1_STORAGE_SEND_ATA_COMMAND,
 				   ps3_mm_phys_to_lpar(__pa(&ata_cmnd)),
 				   sizeof(ata_cmnd), ata_cmnd.buffer,
@@ -359,19 +350,13 @@
 			__func__, __LINE__, res);
 		return -EIO;
 	}
-
 	swap_buf_le16(id, ATA_ID_WORDS);
-
 	/* All we're interested in are raw capacity and model name */
 	priv->raw_capacity = ata_id_n_sectors(id);
 	ata_id_c_string(id, priv->model, ATA_ID_PROD, sizeof(priv->model));
 	return 0;
 }
 
-static unsigned long ps3disk_mask;
-
-static DEFINE_MUTEX(ps3disk_mask_mutex);
-
 static const struct blk_mq_ops ps3disk_mq_ops = {
 	.queue_rq	= ps3disk_queue_rq,
 };
@@ -382,15 +367,7 @@
 	struct ps3disk_private *priv;
 	int error;
 	unsigned int devidx;
-	struct queue_limits lim = {
-		.logical_block_size	= dev->blk_size,
-		.max_hw_sectors		= BOUNCE_SIZE >> 9,
-		.max_segments		= -1,
-		.max_segment_size	= BOUNCE_SIZE,
-		.dma_alignment		= dev->blk_size - 1,
-		.features		= BLK_FEAT_WRITE_CACHE |
-					  BLK_FEAT_ROTATIONAL,
-	};
+	struct queue_limits lim;
 	struct gendisk *gendisk;
 
 	if (dev->blk_size < 512) {
@@ -400,17 +377,7 @@
 		return -EINVAL;
 	}
 
-	BUILD_BUG_ON(PS3DISK_MAX_DISKS > BITS_PER_LONG);
-	mutex_lock(&ps3disk_mask_mutex);
-	devidx = find_first_zero_bit(&ps3disk_mask, PS3DISK_MAX_DISKS);
-	if (devidx >= PS3DISK_MAX_DISKS) {
-		dev_err(&dev->sbd.core, "%s:%u: Too many disks\n", __func__,
-			__LINE__);
-		mutex_unlock(&ps3disk_mask_mutex);
-		return -ENOSPC;
-	}
-	__set_bit(devidx, &ps3disk_mask);
-	mutex_unlock(&ps3disk_mask_mutex);
+	BUG_ON(dev->num_regions > PS3DISK_MAX_NUM_REGS);
 
 	priv = kzalloc(sizeof(*priv), GFP_KERNEL);
 	if (!priv) {
@@ -428,52 +395,71 @@
 		goto fail_free_priv;
 	}
 
+	for (devidx = 0; devidx < dev->num_regions; devidx++) {
+		dev->regions[devidx].flags = region_flags[devidx];
+		priv->next_queue[devidx] = devidx+1;
+	}
+	priv->next_queue[dev->num_regions-1] = 0;
+
 	error = ps3stor_setup(dev, ps3disk_interrupt);
 	if (error)
 		goto fail_free_bounce;
 
 	ps3disk_identify(dev);
-
-	error = blk_mq_alloc_sq_tag_set(&priv->tag_set, &ps3disk_mq_ops, 1,
-					BLK_MQ_F_SHOULD_MERGE);
-	if (error)
-		goto fail_teardown;
-
-	gendisk = blk_mq_alloc_disk(&priv->tag_set, &lim, dev);
-	if (IS_ERR(gendisk)) {
-		dev_err(&dev->sbd.core, "%s:%u: blk_mq_alloc_disk failed\n",
-			__func__, __LINE__);
-		error = PTR_ERR(gendisk);
-		goto fail_free_tag_set;
-	}
-
-	priv->gendisk = gendisk;
-	gendisk->major = ps3disk_major;
-	gendisk->first_minor = devidx * PS3DISK_MINORS;
-	gendisk->minors = PS3DISK_MINORS;
-	gendisk->fops = &ps3disk_fops;
-	gendisk->private_data = dev;
-	snprintf(gendisk->disk_name, sizeof(gendisk->disk_name), PS3DISK_NAME,
-		 devidx+'a');
-	priv->blocking_factor = dev->blk_size >> 9;
-	set_capacity(gendisk,
-		     dev->regions[dev->region_idx].size*priv->blocking_factor);
-
-	dev_info(&dev->sbd.core,
-		 "%s is a %s (%llu MiB total, %llu MiB for OtherOS)\n",
-		 gendisk->disk_name, priv->model, priv->raw_capacity >> 11,
-		 get_capacity(gendisk) >> 11);
-
-	error = device_add_disk(&dev->sbd.core, gendisk, NULL);
-	if (error)
-		goto fail_cleanup_disk;
-
+	memset(&lim, 0, sizeof(struct queue_limits));
+	lim.logical_block_size	= dev->blk_size;
+	lim.max_hw_sectors = dev->bounce_size >> 9;
+	lim.max_segments = -1;
+	lim.max_segment_size = dev->bounce_size;
+	lim.dma_alignment = dev->blk_size - 1;
+	lim.features		= BLK_FEAT_WRITE_CACHE |
+				  BLK_FEAT_ROTATIONAL;
+	for (devidx = 0; devidx < dev->num_regions; devidx++) {
+		if (test_bit(devidx, &dev->accessible_regions) == 0)
+			continue;
+		error = blk_mq_alloc_sq_tag_set(&priv->tag_set[devidx], &ps3disk_mq_ops, 1,
+				BLK_MQ_F_SHOULD_MERGE);
+		if(error) {
+			devidx--;
+			goto fail_free_tag_set;
+		}
+		gendisk = blk_mq_alloc_disk(&priv->tag_set[devidx], &lim, dev);
+		if (IS_ERR(gendisk)) {
+			dev_err(&dev->sbd.core, "%s:%u: blk_mq_alloc_disk failed\n",
+				__func__, __LINE__);
+			error = PTR_ERR(gendisk);
+			blk_mq_free_tag_set(&priv->tag_set[devidx]);
+			devidx--;
+			goto fail_free_tag_set;
+		}
+		priv->gendisk[devidx] = gendisk;
+		gendisk->major = ps3disk_major;
+		gendisk->first_minor = devidx * PS3DISK_MINORS;		
+		gendisk->minors = PS3DISK_MINORS;		
+		gendisk->fops = &ps3disk_fops;
+		gendisk->private_data = dev;
+		snprintf(gendisk->disk_name, sizeof(gendisk->disk_name), PS3DISK_NAME,
+			 devidx+'a');
+		priv->blocking_factor = dev->blk_size >> 9;
+		set_capacity(gendisk,
+			     dev->regions[devidx].size*priv->blocking_factor);
+		dev_info(&dev->sbd.core,
+			 "%s is a %s (%llu MiB total, %llu MiB for OtherOS)\n",
+			 gendisk->disk_name, priv->model, priv->raw_capacity >> 11,
+			 get_capacity(gendisk) >> 11);			 	
+		error = device_add_disk(&dev->sbd.core, gendisk, NULL);
+		if (error)
+			goto fail_free_tag_set;
+	}
 	return 0;
-fail_cleanup_disk:
-	put_disk(gendisk);
+
 fail_free_tag_set:
-	blk_mq_free_tag_set(&priv->tag_set);
-fail_teardown:
+	for (; devidx >= 0; devidx--)
+		if (priv->gendisk[devidx]) {
+			del_gendisk(priv->gendisk[devidx]);
+			put_disk(priv->gendisk[devidx]);
+			blk_mq_free_tag_set(&priv->tag_set[devidx]);
+		}		
 	ps3stor_teardown(dev);
 fail_free_bounce:
 	kfree(dev->bounce_buf);
@@ -481,9 +467,6 @@
 	kfree(priv);
 	ps3_system_bus_set_drvdata(_dev, NULL);
 fail:
-	mutex_lock(&ps3disk_mask_mutex);
-	__clear_bit(devidx, &ps3disk_mask);
-	mutex_unlock(&ps3disk_mask_mutex);
 	return error;
 }
 
@@ -491,14 +474,13 @@
 {
 	struct ps3_storage_device *dev = to_ps3_storage_device(&_dev->core);
 	struct ps3disk_private *priv = ps3_system_bus_get_drvdata(&dev->sbd);
-
-	mutex_lock(&ps3disk_mask_mutex);
-	__clear_bit(MINOR(disk_devt(priv->gendisk)) / PS3DISK_MINORS,
-		    &ps3disk_mask);
-	mutex_unlock(&ps3disk_mask_mutex);
-	del_gendisk(priv->gendisk);
-	put_disk(priv->gendisk);
-	blk_mq_free_tag_set(&priv->tag_set);
+	int devidx;
+	for (devidx = 0; devidx < dev->num_regions; devidx++)
+		if (priv->gendisk[devidx]) {
+			del_gendisk(priv->gendisk[devidx]);
+			put_disk(priv->gendisk[devidx]);
+			blk_mq_free_tag_set(&priv->tag_set[devidx]);
+		}
 	dev_notice(&dev->sbd.core, "Synchronizing disk cache\n");
 	ps3disk_sync_cache(dev);
 	ps3stor_teardown(dev);
@@ -516,14 +498,11 @@
 	.shutdown	= ps3disk_remove,
 };
 
-
 static int __init ps3disk_init(void)
 {
 	int error;
-
 	if (!firmware_has_feature(FW_FEATURE_PS3_LV1))
 		return -ENODEV;
-
 	error = register_blkdev(0, DEVICE_NAME);
 	if (error <= 0) {
 		printk(KERN_ERR "%s:%u: register_blkdev failed %d\n", __func__,
@@ -531,14 +510,10 @@
 		return error;
 	}
 	ps3disk_major = error;
-
 	pr_info("%s:%u: registered block device major %d\n", __func__,
 		__LINE__, ps3disk_major);
-
 	error = ps3_system_bus_driver_register(&ps3disk);
-	if (error)
-		unregister_blkdev(ps3disk_major, DEVICE_NAME);
-
+	if (error) unregister_blkdev(ps3disk_major, DEVICE_NAME);
 	return error;
 }
 
diff -Naur a/drivers/ps3/ps3stor_lib.c b/drivers/ps3/ps3stor_lib.c
--- a/drivers/ps3/ps3stor_lib.c	2024-03-17 06:31:12.000000000 +0700
+++ b/drivers/ps3/ps3stor_lib.c	2024-03-17 19:50:21.961699010 +0700
@@ -90,9 +90,8 @@
 			"%s:%u: checking accessibility of region %u\n",
 			__func__, __LINE__, i);
 
-		dev->region_idx = i;
-		res = ps3stor_read_write_sectors(dev, dev->bounce_lpar, 0, 1,
-						 0);
+		res = ps3stor_read_write_sectors(dev, dev->bounce_lpar, i, 0, 1,
+						 dev->regions[i].flags, 0);	
 		if (res) {
 			dev_dbg(&dev->sbd.core, "%s:%u: read failed, "
 				"region %u is not accessible\n", __func__,
@@ -104,6 +103,10 @@
 			__func__, __LINE__, i);
 		set_bit(i, &dev->accessible_regions);
 
+		dev_info(&dev->sbd.core,
+			 "accessible region %u start %llu size %llu\n",
+			 i, dev->regions[i].start, dev->regions[i].size);
+
 		/* We can access at least one region */
 		error = 0;
 	}
@@ -113,14 +116,8 @@
 	n = hweight_long(dev->accessible_regions);
 	if (n > 1)
 		dev_info(&dev->sbd.core,
-			 "%s:%u: %lu accessible regions found. Only the first "
-			 "one will be used\n",
+			 "%s:%u: %lu accessible regions found\n",
 			 __func__, __LINE__, n);
-	dev->region_idx = __ffs(dev->accessible_regions);
-	dev_info(&dev->sbd.core,
-		 "First accessible region has index %u start %llu size %llu\n",
-		 dev->region_idx, dev->regions[dev->region_idx].start,
-		 dev->regions[dev->region_idx].size);
 
 	return 0;
 }
@@ -254,17 +251,19 @@
  *	ps3stor_read_write_sectors - read/write from/to a storage device
  *	@dev: Pointer to a struct ps3_storage_device
  *	@lpar: HV logical partition address
+ *	@region_idx: Region index
  *	@start_sector: First sector to read/write
  *	@sectors: Number of sectors to read/write
+ *	@flags: Flags
  *	@write: Flag indicating write (non-zero) or read (zero)
  *
  *	Returns 0 for success, -1 in case of failure to submit the command, or
  *	an LV1 status value in case of other errors
  */
-u64 ps3stor_read_write_sectors(struct ps3_storage_device *dev, u64 lpar,
-			       u64 start_sector, u64 sectors, int write)
+u64 ps3stor_read_write_sectors(struct ps3_storage_device *dev, u64 lpar, unsigned int region_idx,
+			       u64 start_sector, u64 sectors, u64 flags, int write)
 {
-	unsigned int region_id = dev->regions[dev->region_idx].id;
+	unsigned int region_id = dev->regions[region_idx].id;
 	const char *op = write ? "write" : "read";
 	int res;
 
@@ -273,10 +272,10 @@
 
 	init_completion(&dev->done);
 	res = write ? lv1_storage_write(dev->sbd.dev_id, region_id,
-					start_sector, sectors, 0, lpar,
+					start_sector, sectors, flags, lpar,
 					&dev->tag)
 		    : lv1_storage_read(dev->sbd.dev_id, region_id,
-				       start_sector, sectors, 0, lpar,
+					start_sector, sectors, flags, lpar,
 				       &dev->tag);
 	if (res) {
 		dev_dbg(&dev->sbd.core, "%s:%u: %s failed %d\n", __func__,
diff -Naur a/drivers/scsi/ps3rom.c b/drivers/scsi/ps3rom.c
--- a/drivers/scsi/ps3rom.c	2024-03-17 06:31:12.000000000 +0700
+++ b/drivers/scsi/ps3rom.c	2024-03-17 19:50:21.965698920 +0700
@@ -60,6 +60,12 @@
 	DIR_READ = 1		/* device -> memory */
 };
 
+static unsigned int region_flags[] =
+{
+	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+};
+module_param_array(region_flags, uint, NULL, S_IRUGO);
+MODULE_PARM_DESC(region_flags, "Region flags");
 
 static int ps3rom_slave_configure(struct scsi_device *scsi_dev)
 {
@@ -161,12 +167,13 @@
 			       u32 sectors)
 {
 	int res;
+	unsigned int region_idx = 0;
 
 	dev_dbg(&dev->sbd.core, "%s:%u: read %u sectors starting at %u\n",
 		__func__, __LINE__, sectors, start_sector);
 
 	res = lv1_storage_read(dev->sbd.dev_id,
-			       dev->regions[dev->region_idx].id, start_sector,
+			       dev->regions[region_idx].id, start_sector,
 			       sectors, 0, dev->bounce_lpar, &dev->tag);
 	if (res) {
 		dev_err(&dev->sbd.core, "%s:%u: read failed %d\n", __func__,
@@ -182,6 +189,7 @@
 				u32 sectors)
 {
 	int res;
+	unsigned int region_idx = 0;
 
 	dev_dbg(&dev->sbd.core, "%s:%u: write %u sectors starting at %u\n",
 		__func__, __LINE__, sectors, start_sector);
@@ -189,7 +197,7 @@
 	scsi_sg_copy_to_buffer(cmd, dev->bounce_buf, dev->bounce_size);
 
 	res = lv1_storage_write(dev->sbd.dev_id,
-				dev->regions[dev->region_idx].id, start_sector,
+				dev->regions[region_idx].id, start_sector,
 				sectors, 0, dev->bounce_lpar, &dev->tag);
 	if (res) {
 		dev_err(&dev->sbd.core, "%s:%u: write failed %d\n", __func__,
@@ -340,6 +348,7 @@
 {
 	struct ps3_storage_device *dev = to_ps3_storage_device(&_dev->core);
 	int error;
+	unsigned int regidx;
 	struct Scsi_Host *host;
 	struct ps3rom_private *priv;
 
@@ -355,6 +364,9 @@
 	if (!dev->bounce_buf)
 		return -ENOMEM;
 
+	for (regidx = 0; regidx < dev->num_regions; regidx++)
+		dev->regions[regidx].flags = region_flags[regidx];
+
 	error = ps3stor_setup(dev, ps3rom_interrupt);
 	if (error)
 		goto fail_free_bounce;
