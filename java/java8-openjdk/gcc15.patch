--- common/autoconf/generated-configure.sh.orig	2025-10-24 09:45:42.141600735 +0000
+++ common/autoconf/generated-configure.sh	2025-10-24 09:45:54.117702380 +0000
@@ -42680,7 +42680,7 @@
       LEGACY_HOST_LDFLAGS="$LEGACY_HOST_LDFLAGS -Wl,-z,relro"
       LEGACY_TARGET_LDFLAGS="$LEGACY_TARGET_LDFLAGS -Wl,-z,relro"
     fi
-    CXXSTD_CXXFLAG="-std=gnu++98"
+    CXXSTD_CXXFLAG="-std=c++98"
 
   { $as_echo "$as_me:${as_lineno-$LINENO}: checking if the C++ compiler supports \"$CXXSTD_CXXFLAG -Werror\"" >&5
 $as_echo_n "checking if the C++ compiler supports \"$CXXSTD_CXXFLAG -Werror\"... " >&6; }
--- common/autoconf/flags.m4.orig	2025-10-24 09:46:13.949870666 +0000
+++ common/autoconf/flags.m4	2025-10-24 09:46:22.252274833 +0000
@@ -443,7 +443,7 @@
       LEGACY_HOST_LDFLAGS="$LEGACY_HOST_LDFLAGS -Wl,-z,relro"
       LEGACY_TARGET_LDFLAGS="$LEGACY_TARGET_LDFLAGS -Wl,-z,relro"
     fi
-    $2CXXSTD_CXXFLAG="-std=gnu++98"
+    $2CXXSTD_CXXFLAG="-std=c++98"
     FLAGS_CXX_COMPILER_CHECK_ARGUMENTS([[$]$2CXXSTD_CXXFLAG -Werror],
                                        [], [$2CXXSTD_CXXFLAG=""])
     $2CXXFLAGS_JDK="${$2CXXFLAGS_JDK} ${$2CXXSTD_CXXFLAG}"
--- hotspot/make/linux/makefiles/ppc64.make.orig	2025-10-24 11:22:22.047864380 +0000
+++ hotspot/make/linux/makefiles/ppc64.make	2025-10-24 12:22:57.547148250 +0000
@@ -41,7 +41,7 @@
   CFLAGS += -mminimal-toc
 
   # finds use ppc64 instructions, but schedule for power5
-  CFLAGS += -mcpu=powerpc64 -mtune=power5 -minsert-sched-nops=regroup_exact -mno-multiple -mno-string
+  CFLAGS += -mcpu=powerpc64 -mtune=power5 -minsert-sched-nops=regroup_exact -mno-multiple -mno-string -std=c++98 -fpermissive -DABI_ELFv2
 else
   # Little endian machine uses ELFv2 ABI.
   CFLAGS += -DVM_LITTLE_ENDIAN -DABI_ELFv2
--- jdk/src/share/native/common/jni_util.h.orig	2025-10-24 14:14:56.112448776 +0000
+++ jdk/src/share/native/common/jni_util.h	2025-10-24 14:15:40.865694962 +0000
@@ -407,7 +407,7 @@
 
 int getFastEncoding();
 
-void initializeEncoding();
+void initializeEncoding(JNIEnv *env);
 
 void* getProcessHandle();
 
