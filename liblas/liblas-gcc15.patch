diff -rupN libLAS-62f3d57215ba1b074a84ff08a1539b69e69e38fb/apps/las2col.c libLAS-62f3d57215ba1b074a84ff08a1539b69e69e38fb-new/apps/las2col.c
--- libLAS-62f3d57215ba1b074a84ff08a1539b69e69e38fb/apps/las2col.c	2024-09-16 20:55:36.000000000 +0200
+++ libLAS-62f3d57215ba1b074a84ff08a1539b69e69e38fb-new/apps/las2col.c	2025-02-13 00:15:05.260929008 +0100
@@ -452,17 +452,17 @@ void* readFile(void *arg) {
                     case ENTRY_y:
                     case ENTRY_z:
                     case ENTRY_t:
-                        ((double*) dataWriteTT[j].values)[index] = entriesFuncD[j](p);
+                        ((double*) dataWriteTT[j].values)[index] = ((double(*)(LASPointH))entriesFuncD[j])(p);
                         //printf(" Point is:%lf\n", ((double*) dataWriteTT[j].values)[index]);
                         break;
                     case ENTRY_X:
-                        ((int*) dataWriteTT[j].values)[index] = entriesFuncD[j](p) / file_scale_x;
+                        ((int*) dataWriteTT[j].values)[index] = ((double(*)(LASPointH))entriesFuncD[j])(p) / file_scale_x;
                         break;
                     case ENTRY_Y:
-                        ((int*) dataWriteTT[j].values)[index] = entriesFuncD[j](p) / file_scale_y;
+                        ((int*) dataWriteTT[j].values)[index] = ((double(*)(LASPointH))entriesFuncD[j])(p) / file_scale_y;
                         break;
                     case ENTRY_Z:
-                        ((int*) dataWriteTT[j].values)[index] = entriesFuncD[j](p) / file_scale_z;
+                        ((int*) dataWriteTT[j].values)[index] = ((double(*)(LASPointH))entriesFuncD[j])(p) / file_scale_z;
                         break;
                     case ENTRY_i:
                     case ENTRY_r:
@@ -470,22 +470,22 @@ void* readFile(void *arg) {
                     case ENTRY_p:
                     case ENTRY_e:
                     case ENTRY_d:
-                        ((short*) dataWriteTT[j].values)[index] = entriesFuncS[j](p);
+                        ((short*) dataWriteTT[j].values)[index] = ((short(*)(LASPointH))entriesFuncS[j])(p);
                         break;
                     case ENTRY_a:
                     case ENTRY_c:
                     case ENTRY_u:
-                        ((char*) dataWriteTT[j].values)[index] = entriesFuncC[j](p);
+                        ((char*) dataWriteTT[j].values)[index] = ((char(*)(LASPointH))entriesFuncC[j])(p);
                         break;
                     case ENTRY_k:
-                        entriesFuncD[j](&res, p, factorX, factorY);
+                        ((double(*)(uint64_t*, LASPointH, int64_t, int64_t))entriesFuncD[j])(&res, p, factorX, factorY);
                         ((int64_t*)dataWriteTT[j].values)[index] = res;
                         break;
                     case ENTRY_R:
                     case ENTRY_G:
                     case ENTRY_B:
                         color = (color == NULL) ? LASPoint_GetColor(p) : color;
-                        ((unsigned short*) dataWriteTT[j].values)[index] = entriesFuncS[j](color);;
+                        ((unsigned short*) dataWriteTT[j].values)[index] = ((short(*)(LASColorH))entriesFuncS[j])(color);;
                         break;
                     case ENTRY_M:
                         ((unsigned int*)dataWriteTT[j].values)[index] = index;
