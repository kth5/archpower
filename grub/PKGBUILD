# POWER Maintainer: Alexander Baldeck <alex.bldck@gmail.com>
# Maintainer : Christian Hesse <mail@eworm.de>
# Maintainer : Tobias Powalowski <tpowa@archlinux.org>
# Contributor: Ronald van Haren <ronald.archlinux.org>
# Contributor: Keshav Amburay <(the ddoott ridikulus ddoott rat) (aatt) (gemmaeiil) (ddoott) (ccoomm)>

## "1" to enable IA32-EFI build in Arch x86_64, "0" to disable
_IA32_EFI_IN_ARCH_X64="1"

## "1" to enable EMU build, "0" to disable
_GRUB_EMU_BUILD="0"

case "${CARCH}" in
 powerpc64le)
   _PLATFORM="ieee1275"
   _TARGET="ppc64le"
 ;;
 powerpc|powerpc64)
   _PLATFORM="ieee1275"
   _TARGET="powerpc"
 ;;
 riscv64)
    _PLATFORM="efi"
    _TARGET="riscv64"
    _EFI_ARCH="riscv64"
    _EMU_ARCH="riscv64"
  ;;
 i686)
    _PLATFORM="pc"
    _TARGET="i386"
    _EFI_ARCH="i386"
    _EMU_ARCH="i386"
  ;;
 x86_64)
    _PLATFORM="pc"
    _TARGET="x86_64"
    _EFI_ARCH="x86_64"
    _EMU_ARCH="x86_64"
  ;;
esac

pkgname='grub'
pkgdesc='GNU GRand Unified Bootloader (2)'
epoch=2
_pkgver=2.12
_unifont_ver='16.0.02'
pkgver=${_pkgver/-/}
pkgrel=3
url='https://www.gnu.org/software/grub/'
arch=(x86_64 powerpc64le powerpc64 powerpc riscv64)
license=('GPL-3.0-or-later')
backup=(
  etc/default/grub
  etc/grub.d/40_custom
)
install="${pkgname}.install"
options=('!makeflags' '!distcc' '!ccache')

conflicts=('grub-common' 'grub-bios' 'grub-emu' "grub-efi-${_EFI_ARCH}" 'grub-legacy')
replaces=('grub-common' 'grub-bios' 'grub-emu' "grub-efi-${_EFI_ARCH}")
provides=('grub-common' 'grub-bios' 'grub-emu' "grub-efi-${_EFI_ARCH}")

makedepends=('git' 'rsync' 'xz' 'python' 'autogen' 'freetype2' 'ttf-dejavu'
	     'texinfo' 'help2man' 'gettext' 'device-mapper' 'fuse3')
makedepends_powerpc64le=('clang')
depends=('sh' 'xz' 'gettext' 'device-mapper')
optdepends=('freetype2: For grub-mkfont usage'
	    'fuse3: For grub-mount usage'
	    'dosfstools: For grub-mkrescue FAT FS and EFI support'
	    'lzop: For grub-mkrescue LZO support'
	    'efibootmgr: For grub-install EFI support'
	    'libisoburn: Provides xorriso for generating grub rescue iso using grub-mkrescue'
	    'os-prober: To detect other OSes when generating grub.cfg in BIOS systems'
	    'mtools: For grub-mkrescue FAT FS support')

options=(!debug)

if [[ "${_GRUB_EMU_BUILD}" == "1" ]]; then
    makedepends+=('libusbx' 'sdl')
    optdepends+=('libusbx: For grub-emu USB support'
	         'sdl: For grub-emu SDL support')
fi

validpgpkeys=('E53D497F3FA42AD8C9B4D1E835A93B74E82E4209'  # Vladimir 'phcoder' Serbinenko <phcoder@gmail.com>
	      'BE5C23209ACDDACEB20DB0A28C8189F1988C2166'  # Daniel Kiper <dkiper@net-space.pl>
	      '95D2E9AB8740D8046387FD151A09227B1F435A33') # Paul Hardy <unifoundry@unifoundry.com>

source=("git+https://git.savannah.gnu.org/git/grub.git#tag=grub-${_pkgver}?signed"
	'git+https://git.savannah.gnu.org/git/gnulib.git'
	"https://ftp.gnu.org/gnu/unifont/unifont-${_unifont_ver}/unifont-${_unifont_ver}.bdf.gz"{,.sig}
	'0001-00_header-add-GRUB_COLOR_-variables.patch'
	'0002-10_linux-detect-archlinux-initramfs.patch'
	'0003-support-dropins-for-default-configuration.patch'
	'0004-ieee1275-clear-reset.patch'
	'0005-install-powerpc-machtypes.patch'
        '0006-fat-fix-listing-the-root-directory.patch'
        '0007-ppc64el-disable-vsx.patch'
	'grub.default'
	'sbat.csv')

sha256sums=('304d5c0d506d3aaab496bdcbfc325b89fc83348aeb9e69d7b6a928f4051bedb2'
            'SKIP'
            '521f2b92e8b6bd4ea190cea049a039dde359a6e2cae9458e45d696008fa6997f'
            'SKIP'
            '5dee6628c48eef79812bb9e86ee772068d85e7fcebbd2b2b8d1e19d24eda9dab'
            '8488aec30a93e8fe66c23ef8c23aefda39c38389530e9e73ba3fbcc8315d244d'
            'b5d9fcd62ffb3c3950fdeb7089ec2dc2294ac52e9861980ad90a437dedbd3d47'
            '04c0a3e811d14367f7b26c1e3d6862dd5406fc29a3b741f752e7d214a2212b53'
            'ab508aefda6b5c6c9119c98e2d6fc65cb383408b29d2652e8f67049553b04776'
            'd928cedb7bd6b404fbf71b5052628462f6b2d6b893f3b2918ecb17f133057c13'
            '4084fd43eeba348f52a3d2058e4cf3c34a8a447553b4ec9f68ce1e7e7cc6b7fe'
            '99feaaecb725a29cf404b98eb29ce0fc21ce1babcaf036d86c31ab492d52f8e5'
            '5f2455d3c4c4777173a66090ba8e13a3b4d4bfa1bcf06f2f2f334d455f0fe9af')

_backports=(
)

_configure_options=(
	PACKAGE_VERSION="${epoch}:${pkgver}-${pkgrel}"
	--enable-nls
	--enable-cache-stats
	--prefix="/usr"
	--bindir="/usr/bin"
	--sbindir="/usr/bin"
	--mandir="/usr/share/man"
	--infodir="/usr/share/info"
	--datarootdir="/usr/share"
	--sysconfdir="/etc"
	--program-prefix=""
	--with-bootdir="/boot"
	--with-grubdir="grub"
	--disable-silent-rules
	--disable-werror
)

case "${CARCH}" in
  powerpc64le)
    export CC=clang
    export CXX=clang++
    export CFLAGS+=" -mno-altivec"
  ;;
  powerpc|powerpc64)
    export CFLAGS="-O2 -pipe -mno-altivec"
    _configure_options+=(
      FREETYPE="pkg-config freetype2"
      BUILD_FREETYPE="pkg-config freetype2"
      --enable-device-mapper
      --enable-grub-mkfont
      --enable-grub-mount
    )
  ;;
  *)
    _configure_options+=(
      FREETYPE="pkg-config freetype2"
      BUILD_FREETYPE="pkg-config freetype2"
      --enable-device-mapper
      --enable-grub-mkfont
      --enable-grub-mount
    )
  ;;
esac

prepare() {
	cd "${srcdir}/grub/"

	echo "Apply backports..."
	local _c
	for _c in "${_backports[@]}"; do
		git log --oneline -1 "${_c}"
		git cherry-pick -n "${_c}"
	done

	echo "Patch to enable GRUB_COLOR_* variables in grub-mkconfig..."
	## Based on http://lists.gnu.org/archive/html/grub-devel/2012-02/msg00021.html
	patch -Np1 -i "${srcdir}/0001-00_header-add-GRUB_COLOR_-variables.patch"

	echo "Patch to detect of Arch Linux initramfs images by grub-mkconfig..."
	patch -Np1 -i "${srcdir}/0002-10_linux-detect-archlinux-initramfs.patch"

	echo "Patch to support dropins for default configuration..."
	patch -Np1 -i "${srcdir}/0003-support-dropins-for-default-configuration.patch"
	echo "Fix DejaVuSans.ttf location so that grub-mkfont can create *.pf2 files for starfield theme..."
	sed 's|/usr/share/fonts/dejavu|/usr/share/fonts/dejavu /usr/share/fonts/TTF|g' -i "configure.ac"

	echo "Fix DejaVuSans.ttf location so that grub-mkfont can create *.pf2 files for starfield theme..."
	sed 's|/usr/share/fonts/dejavu|/usr/share/fonts/dejavu /usr/share/fonts/TTF|g' -i "configure.ac"

	echo "Fix mkinitcpio 'rw' FS#36275..."
	sed 's| ro | rw |g' -i "util/grub.d/10_linux.in"

	echo "Fix OS naming FS#33393..."
	sed 's|GNU/Linux|Linux|' -i "util/grub.d/10_linux.in"

	echo "Pull in latest language files..."
	./linguas.sh

	echo "Avoid problem with unifont during compile of grub..."
	# http://savannah.gnu.org/bugs/?40330 and https://bugs.archlinux.org/task/37847
	gzip -cd "${srcdir}/unifont-${_unifont_ver}.bdf.gz" > "unifont.bdf"

	echo "Run bootstrap..."
	./bootstrap \
		--gnulib-srcdir="${srcdir}/gnulib/" \
		--no-git

	echo "Make translations reproducible..."
	sed -i '1i /^PO-Revision-Date:/ d' po/*.sed

	patch -Np1 -i ${srcdir}/0004-ieee1275-clear-reset.patch
	patch -Np1 -i ${srcdir}/0005-install-powerpc-machtypes.patch
        patch -Np1 -i ${srcdir}/0006-fat-fix-listing-the-root-directory.patch
        patch -Np1 -i ${srcdir}/0007-ppc64el-disable-vsx.patch
}

_build_grub-common_and_bios() {
	echo "Set ARCH dependent variables for bios build..."
	if [[ "${CARCH}" == 'x86_64' ]]; then
		_EFIEMU="--enable-efiemu"
	else
		_EFIEMU="--disable-efiemu"
	fi

	echo "Copy the source for building the bios part..."
	cp -r "${srcdir}/grub/" "${srcdir}/grub-bios/"
	cd "${srcdir}/grub-bios/"

	echo "Unset all compiler FLAGS for bios build..."
	unset CFLAGS
	unset CPPFLAGS
	unset CXXFLAGS
	unset LDFLAGS
	unset MAKEFLAGS

	case "${CARCH}" in
		x86_64) _configure_options+=(--target="${_TARGET}") ;;
	esac

	echo "Run ./configure for bios build..."
	./configure \
		--with-platform="${_PLATFORM}" \
		"${_EFIEMU}" \
		--enable-boot-time \
		"${_configure_options[@]}" || cat config.log

	if [ ! -z "${SOURCE_DATE_EPOCH}" ]; then
		echo "Make info pages reproducible..."
		touch -d "@${SOURCE_DATE_EPOCH}" $(find -name '*.texi')
	fi

	echo "Run make for bios build..."
	make
}

_build_grub-efi() {
	echo "Copy the source for building the ${_EFI_ARCH} efi part..."
	cp -r "${srcdir}/grub/" "${srcdir}/grub-efi-${_EFI_ARCH}/"
	cd "${srcdir}/grub-efi-${_EFI_ARCH}/"

	echo "Unset all compiler FLAGS for ${_EFI_ARCH} efi build..."
	unset CFLAGS
	unset CPPFLAGS
	unset CXXFLAGS
	unset LDFLAGS
	unset MAKEFLAGS

	echo "Run ./configure for ${_EFI_ARCH} efi build..."
	./configure \
		--with-platform="efi" \
		--target="${_EFI_ARCH}" \
		--disable-efiemu \
		--enable-boot-time \
		"${_configure_options[@]}"

	echo "Run make for ${_EFI_ARCH} efi build..."
	make
}

_build_grub-emu() {
	echo "Copy the source for building the emu part..."
	cp -r "${srcdir}/grub/" "${srcdir}/grub-emu/"
	cd "${srcdir}/grub-emu/"

	echo "Unset all compiler FLAGS for emu build..."
	unset CFLAGS
	unset CPPFLAGS
	unset CXXFLAGS
	unset LDFLAGS
	unset MAKEFLAGS

	echo "Run ./configure for emu build..."
	./configure \
		--with-platform="emu" \
		--target="${_EMU_ARCH}" \
		--enable-grub-emu-usb=no \
		--enable-grub-emu-sdl=no \
		--disable-grub-emu-pci \
		"${_configure_options[@]}"

	echo "Run make for emu build..."
	make
}

build() {
	cd "${srcdir}/grub/"

	echo "Build grub bios stuff..."
	_build_grub-common_and_bios

	case "${CARCH}" in
	  x86_64|riscv64)
	    echo "Build grub ${_EFI_ARCH} efi stuff..."
	    _build_grub-efi
	  ;;
	esac

	if [[ "${CARCH}" == "x86_64" ]] && [[ "${_IA32_EFI_IN_ARCH_X64}" == "1" ]]; then
		echo "Build grub i386 efi stuff..."
		_EFI_ARCH="i386" _build_grub-efi
	fi

	if [[ "${_GRUB_EMU_BUILD}" == "1" ]]; then
		echo "Build grub emu stuff..."
		_build_grub-emu
	fi
}

_package_grub-common_and_bios() {
	case "${CARCH}" in
		powerpc64le) ;;
		*)
			cd "${srcdir}/grub-bios/"
			echo "Run make install for bios build..."
			make DESTDIR="${pkgdir}/" bashcompletiondir="/usr/share/bash-completion/completions" install
		;;
	esac

	echo "Remove gdb debugging related files for bios build..."
	rm -f "${pkgdir}/usr/lib/grub/${_TARGET}-${_PLATFORM}"/*.module || true
	rm -f "${pkgdir}/usr/lib/grub/${_TARGET}-${_PLATFORM}"/*.image || true
	rm -f "${pkgdir}/usr/lib/grub/${_TARGET}-${_PLATFORM}"/{kernel.exec,gdb_grub,gmodule.pl} || true

	echo "Install /etc/default/grub (used by grub-mkconfig)..."
	install -D -m0644 "${srcdir}/grub.default" "${pkgdir}/etc/default/grub"
}

_package_grub-efi() {
	cd "${srcdir}/grub-efi-${_EFI_ARCH}/"

	echo "Run make install for ${_EFI_ARCH} efi build..."
	make DESTDIR="${pkgdir}/" bashcompletiondir="/usr/share/bash-completion/completions" install

	echo "Remove gdb debugging related files for ${_EFI_ARCH} efi build..."
	rm -f "${pkgdir}/usr/lib/grub/${_EFI_ARCH}-efi"/*.module || true
	rm -f "${pkgdir}/usr/lib/grub/${_EFI_ARCH}-efi"/*.image || true
	rm -f "${pkgdir}/usr/lib/grub/${_EFI_ARCH}-efi"/{kernel.exec,gdb_grub,gmodule.pl} || true

	sed -e "s/%PKGVER%/${epoch}:${pkgver}-${pkgrel}/" < "${srcdir}/sbat.csv" > "${pkgdir}/usr/share/grub/sbat.csv"
}

_package_grub-emu() {
	cd "${srcdir}/grub-emu/"

	echo "Run make install for emu build..."
	make DESTDIR="${pkgdir}/" bashcompletiondir="/usr/share/bash-completion/completions" install

	echo "Remove gdb debugging related files for emu build..."
	rm -f "${pkgdir}/usr/lib/grub/${_EMU_ARCH}-emu"/*.module || true
	rm -f "${pkgdir}/usr/lib/grub/${_EMU_ARCH}-emu"/*.image || true
	rm -f "${pkgdir}/usr/lib/grub/${_EMU_ARCH}-emu"/{kernel.exec,gdb_grub,gmodule.pl} || true
}

package() {
	cd "${srcdir}/grub/"

	case "${CARCH}" in
	  x86_64|riscv64)
	     echo "Package grub ${_EFI_ARCH} efi stuff..."
	    _package_grub-efi
	  ;;
	esac

	if [[ "${CARCH}" == "x86_64" ]] && [[ "${_IA32_EFI_IN_ARCH_X64}" == "1" ]]; then
		echo "Package grub i386 efi stuff..."
		_EFI_ARCH="i386" _package_grub-efi
	fi

	if [[ "${_GRUB_EMU_BUILD}" == "1" ]]; then
		echo "Package grub emu stuff..."
		_package_grub-emu
	fi

	echo "Package grub bios stuff..."
	_package_grub-common_and_bios
}
