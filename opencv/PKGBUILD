# POWER Maintainer: Alexander Baldeck <alex.bldck@gmail.com>
# Maintainer: Antonio Rojas <arojas@archlinux.org>
# Contributor: Ray Rashif <schiv@archlinux.org>
# Contributor: Tobias Powalowski <tpowa@archlinux.org>

pkgbase=opencv
pkgname=(opencv
         opencv-samples
         python-opencv)
case "${CARCH}" in
  x86_64) pkgname+=(opencv-cuda python-opencv-cuda) ;;
esac
pkgver=4.12.0
pkgrel=11
pkgdesc='Open Source Computer Vision Library'
arch=(x86_64 powerpc64le powerpc64 powerpc espresso)
license=(Apache-2.0)
url='https://opencv.org/'
depends=(abseil-cpp
         cblas
         ffmpeg
         freetype2
         gcc-libs
         glib2
         glibc
         gst-plugins-base
         gst-plugins-base-libs
         gstreamer
         harfbuzz
         lapack
         libdc1394
         libglvnd
         libjpeg-turbo
         libjxl
         libpng
         libtiff
         libwebp
         openexr
         openjpeg2
         verdict
         protobuf
         onetbb
         zlib)
makedepends=(ant
             cmake
             eigen
             fmt
             git
             glew
             hdf5
             java-environment
             lapacke
             mesa
             nlohmann-json
             openmpi
             pugixml
             python-numpy
             python-setuptools
             qt6-5compat)
makedepends_x86_64=(
             cuda
             cudnn
             vtk
)
optdepends=('opencv-samples: samples'
            'glew: for the viz module'
            'qt6-base: for the HighGUI module'
            'hdf5: for the HDF5 module'
            'opencl-icd-loader: For coding with OpenCL'
            'java-runtime: Java interface')
optdepends_x86_64=('vtk: for the viz module')
source=(git+https://github.com/opencv/opencv#tag=$pkgver
        git+https://github.com/opencv/opencv_contrib#tag=$pkgver
        vtk9.patch
        fix-cuda-flags.patch)
sha256sums=('84e35af82626500e922560ea7d04aeea1dfc86e0dc53445fe748325c76e511f8'
            '97f1ee43d9177b2da4bcc5cccbb962cf5a8a0cab04c2a304cebefda6b8b34595'
            'f35a2d4ea0d6212c7798659e59eda2cb0b5bc858360f7ce9c696c77d3029668e'
            '95472ecfc2693c606f0dd50be2f012b4d683b7b0a313f51484da4537ab8b2bfe')
options=(!lto) # https://gitlab.archlinux.org/archlinux/packaging/packages/kdenlive/-/issues/8

prepare() {
  pushd opencv
  git cherry-pick -n cb8030809e0278d02fa335cc1f5ec7c3c17548e0 # Fix configuring with CMake version 4

  # Support CUDA 13
  git cherry-pick -n df23b593c52e0e18095a3d2e772fe13083e2ebe7 \
                     42f89347005dcd14a671d30a52a046e45303833b \
                     3278820f5df20a6d4170b7374a9b396250e36641

  # Support Eigen 5
  git cherry-pick -n 353b4ddf52db48ba85d2efaa33310afa0eb73a72

  # Support FFmpeg 8
  git cherry-pick -n 90c444abd387ffa70b2e72a34922903a2f0f4f5a

  patch -p1 < ../vtk9.patch # Don't require all vtk optdepends
  # https://github.com/opencv/opencv/issues/27223
  # https://bugreports.qt.io/browse/QTBUG-134774
  sed -i 's/add_definitions(${Qt${QT_VERSION_MAJOR}${dt_dep}_DEFINITIONS})/link_libraries(${Qt${QT_VERSION_MAJOR}${dt_dep}})/' modules/highgui/CMakeLists.txt
  # OpenCV passes all CXXFLAGS to nvcc through -Xcompiler, which does not work for '-Wp,something' flags
  # We remove the -Xcompiler and pass our CXXFLAGS through cmake's CUDAFLAGS
  patch -p1 < ../fix-cuda-flags.patch
  popd

  pushd opencv_contrib
  # Support CUDA 13
  git cherry-pick -n 9a9b173cd178e7c07a98896a009c2a2021a6b247
}

build() {
  export LDFLAGS+=' -lverdict'
  case "${CARCH}" in
    powerpc)
      export CFLAGS='-O2 -pipe'
      export CXXFLAGS='-O2 -pipe -latomic'
    ;;
    powerpc64*)
      export CFLAGS='-O2 -pipe'
      export CXXFLAGS='-O2 -pipe'
    ;;
  esac

  export JAVA_HOME="/usr/lib/jvm/default"
  local cmake_options=(
    -DWITH_OPENCL=ON
    -DWITH_OPENGL=ON
    -DOpenGL_GL_PREFERENCE=LEGACY
    -DCMAKE_CXX_STANDARD=17
    -DWITH_TBB=ON
    -DWITH_VULKAN=ON
    -DWITH_QT=ON
    -DWITH_JPEGXL=ON
    -DBUILD_TESTS=OFF
    -DBUILD_PERF_TESTS=OFF
    -DBUILD_EXAMPLES=ON
    -DBUILD_PROTOBUF=OFF
    -DPROTOBUF_UPDATE_FILES=ON
    -DINSTALL_C_EXAMPLES=ON
    -DINSTALL_PYTHON_EXAMPLES=ON
    -DCMAKE_INSTALL_PREFIX=/usr
    -DCPU_BASELINE_DISABLE=SSE3
    -DCPU_BASELINE_DISABLE=SSE2
    -DOPENCV_EXTRA_MODULES_PATH="$srcdir"/opencv_contrib/modules
    -DOPENCV_SKIP_PYTHON_LOADER=ON
    # cmake's FindLAPACK doesn't add cblas to LAPACK_LIBRARIES, so we need to specify them manually
    -DLAPACK_LIBRARIES="/usr/lib/liblapack.so;/usr/lib/libblas.so;/usr/lib/libcblas.so"
    -DLAPACK_CBLAS_H=/usr/include/cblas.h
    -DLAPACK_LAPACKE_H=/usr/include/lapacke.h
    -DOPENCV_GENERATE_PKGCONFIG=ON
    -DOPENCV_ENABLE_NONFREE=ON
    -DOPENCV_JNI_INSTALL_PATH=lib
    -DOPENCV_GENERATE_SETUPVARS=OFF
    -DEIGEN_INCLUDE_PATH=/usr/include/eigen3
    -Dprotobuf_MODULE_COMPATIBLE=ON
    -DHDF5_NO_FIND_PACKAGE_CONFIG_FILE=ON
  )

  case "${CARCH}" in
    powerpc64le) cmake_options+=(-DHAVE_CXX_MCPU_POWER9_MTUNE_POWER9=OFF -DCV_ENABLE_INTRINSICS=OFF) ;;
  esac

  cmake -B build -S $pkgname "${cmake_options[@]}" \
    -DBUILD_WITH_DEBUG_INFO=ON
  cmake --build build

  case "${CARCH}" in
    x86_64)
      # In general, we want to list all real archs (sm_XX) and the latest virtual arch (compute_XX) for future PTX compatibility.
      # Valid values can be discovered from nvcc --help
      local cuda_archs="75;80;86;87;88;89;90;100;103;110;120;121;121-virtual"

      # Avoid nvcc intercepting -Werror=format-security: Value 'format-security' is not defined for option 'Werror'
      CUDAFLAGS="${CXXFLAGS/-Werror=format-security/-Xcompiler -Werror=format-security} -fno-lto --threads 0" \
      CFLAGS="${CFLAGS} -fno-lto" CXXFLAGS="${CXXFLAGS} -fno-lto" LDFLAGS="${LDFLAGS} -fno-lto" \
      cmake -B build-cuda -S $pkgname "${cmake_options[@]}" \
        -DBUILD_WITH_DEBUG_INFO=OFF \
        -DWITH_CUDA=ON \
        -DWITH_CUDNN=ON \
        -DENABLE_CUDA_FIRST_CLASS_LANGUAGE=ON \
        -DCMAKE_CUDA_ARCHITECTURES="$cuda_archs"
      cmake --build build-cuda --verbose
    ;;
  esac
}

package_opencv() {
  DESTDIR="$pkgdir" cmake --install build

  # separate samples package
  mv "$pkgdir"/usr/share/opencv4/samples "$srcdir"

  # Add java symlinks expected by some binary blobs
  ln -sr "$pkgdir"/usr/share/java/{opencv4/opencv-${pkgver//./},opencv}.jar
  ln -sr "$pkgdir"/usr/lib/{libopencv_java${pkgver//./},libopencv_java}.so

  # Split Python bindings
  rm -r "$pkgdir"/usr/lib/python3*
}

package_opencv-samples() {
  pkgdesc+=' (samples)'
  depends=(opencv)
  unset optdepends

  mkdir -p "$pkgdir"/usr/share/opencv4
  mv samples "$pkgdir"/usr/share/opencv4
}

package_python-opencv() {
  pkgdesc='Python bindings for OpenCV'
  depends=(fmt
           glew
           hdf5
           jsoncpp
           opencv
           openmpi
           pugixml
           python-numpy
           qt6-base)
  depends_x86_64=(vtk)
  unset optdepends

  DESTDIR="$pkgdir" cmake --install build/modules/python3
}

package_opencv-cuda() {
  pkgdesc+=' (with CUDA support)'
  depends+=(cudnn)
  conflicts=(opencv)
  provides=(opencv=$pkgver)
  options=(!debug)

  DESTDIR="$pkgdir" cmake --install build-cuda

  # Split samples
  rm -r "$pkgdir"/usr/share/opencv4/samples

  # Add java symlinks expected by some binary blobs
  ln -sr "$pkgdir"/usr/share/java/{opencv4/opencv-${pkgver//./},opencv}.jar
  ln -sr "$pkgdir"/usr/lib/{libopencv_java${pkgver//./},libopencv_java}.so

  # Split Python bindings
  rm -r "$pkgdir"/usr/lib/python3*
}

package_python-opencv-cuda() {
  pkgdesc='Python bindings for OpenCV (with CUDA support)'
  depends=(fmt
           glew
           hdf5
           jsoncpp
           opencv-cuda
           openmpi
           pugixml
           python-numpy
           qt6-base)
  depends_x86_64=(vtk)
  conflicts=(python-opencv)
  provides=(python-opencv=$pkgver)
  unset optdepends

  DESTDIR="$pkgdir" cmake --install build-cuda/modules/python3
}
