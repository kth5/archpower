# POWER Maintainer: Alexander Baldeck <alex.bldck@gmail.com>
# Maintainer: Sven-Hendrik Haase <svenstaro@archlinux.org>
# Contributor: Hurricane Pootis <hurricanepootis@protonmail.com>
# Contributor: John Sowiak <john@archlinux.org>
# Contributor: tobias <tobias@archlinux.org>

# For legal reasons, we can't separately package the Optix headers so we'll
# just build the package against them. I checked with NVIDIA and this way is
# fine with them.

pkgname=blender
pkgver=4.4.1
pkgrel=1
epoch=17
pkgdesc="A fully integrated 3D graphics creation suite"
arch=(x86_64 powerpc64le)
license=(
  Apache-2.0
  BSD-2-Clause
  BSD-3-Clause
  GPL-2.0-or-later
  GPL-3.0-or-later
  LGPL-2.1-or-later
  MIT
  MPL-2.0
  Zlib
)
url="https://www.blender.org"
depends=(
  'alembic'
  'bash'
  'boost-libs'
  'draco'  # seems to use static lib and should probably only be makedepends
  'expat'
  'ffmpeg'
  'fftw'
  'freetype2'
  'gcc-libs'
  'glew'
  'glibc'
  'gmp'
  'hicolor-icon-theme'
  'imath'
  'jack'  # dlopen'ed
  'jemalloc'
  'level-zero-loader'  # dlopen'ed
  'libepoxy'
  'libharu'
  'libjpeg-turbo'
  'libpng'
  'libsndfile'
  'libspnav'
  'libtiff'
  'libwebp'
  'libx11'
  'libxfixes'
  'libxi'
  'libxkbcommon'
  'libxml2'
  'libxrender'
  'libxxf86vm'
  'llvm-libs'
  'materialx'
  'onetbb'
  'openal'
  'opencollada'
  'opencolorio'
  'openexr'
  'openimageio'
  'openjpeg2'
  'openshadinglanguage'
  'opensubdiv'
  'openvdb'
  'openxr'
  'potrace'
  'pugixml'
  'pystring'
  'python'
  'python-numpy'
  'python-requests'
  'sdl2'  # dlopen'ed
  'shared-mime-info'
  'xdg-utils'
  'yaml-cpp'
  'zlib'
  'zstd'
)
depends_x86_64=(
  'openimagedenoise'
  'intel-oneapi-compiler-shared-runtime-libs'
  'intel-oneapi-compiler-dpcpp-cpp-runtime-libs'
  'embree'
  'openpgl'
  'usd'
)
makedepends=(
  'boost'
  'cmake'
  'git'
  'git-lfs'
  'hip-runtime-amd'
  'level-zero-headers'
  'libdecor'
  'mold'
  'llvm'
  'mesa'
  'ninja'
  'subversion'
  'vulkan-headers'
  'wayland-protocols'
)
makedepends_x86_64=(
  'cuda'
  'intel-oneapi-compiler-shared-runtime'
  'intel-compute-runtime'
  'intel-oneapi-dpcpp-cpp'
)
optdepends=(
  'libdecor: wayland support'
)
optdepends_x86_64=(
  'cuda: Cycles renderer CUDA support'
  'intel-compute-runtime: Cycles renderer Intel OneAPI support'
)
# We're using !lto here as otherwise we get stuff such as FS#77557
options=('!lto')
source=("git+https://projects.blender.org/blender/blender.git#tag=v$pkgver"
        "git+https://projects.blender.org/blender/blender-assets#tag=v$pkgver"
        https://developer.download.nvidia.com/redist/optix/v8.0/OptiX-8.0-Include.zip
        hiprt-lib-path.patch)
sha512sums=('aaa6a124dd2b66a8fb3919580d4c5cec8a14c1c4294ab50570e50649f8e93f2c78894514e0606251f99a5194d51ca15e85d71471dcc3c240a66e7373168e7fba'
            '43cc5f388581698a68ad611222fcf48445441fc58685259beacb4e6de62c86db6adb7d255f1781bbb1cacf3eade4a6745ddcc519dfed3f776bddcbe1e3ee82d9'
            '5502d9df847de12badc702c0444bd4f1f7620460b2235026df2c3133da1e04c148af0f1fc7f345e9a0c009c32f905f66c8d427743445e8864d3a797cdce6a483'
            '52dd6c4496af38505761e559adee556176aa2ad023f073618af77f6c9bc5e3a8faa59c8f259dc92302f7e650740afd2060951129408f1939d29c0901e8ccccae')

prepare() {
  cd "$pkgname"

  git submodule init
  git config submodule.release/datafiles/assets.url "$srcdir/blender-assets"
  git -c protocol.file.allow=always submodule update

  # Fetch assets from git-lfs
  git -C release/datafiles/assets lfs install --local
  git -C release/datafiles/assets remote add network-origin https://projects.blender.org/blender/blender-assets
  git -C release/datafiles/assets lfs fetch network-origin
  git -C release/datafiles/assets lfs checkout

  patch -p1 -i "$srcdir"/hiprt-lib-path.patch
}

_get_pyver() {
  python -c 'import sys; print(str(sys.version_info[0]) + "." + str(sys.version_info[1]))'
}

build() {
  # This should fix #13.
  export CXXFLAGS=${CXXFLAGS/-Wp,-D_GLIBCXX_ASSERTIONS/}
  CXXFLAGS+=' --param=max-vartrack-size=640000000'

  # Fix numpy discovery
  sed -i "s|core/include|_core/include|g" blender/CMakeLists.txt

  local cmake_options=(
    -B build
    -C "$pkgname/build_files/cmake/config/blender_release.cmake"
    -D CMAKE_BUILD_TYPE=Release
    -D CMAKE_INSTALL_PREFIX=/usr
    -D WITH_LINKER_MOLD=ON
    -D HIP_ROOT_DIR=/opt/rocm
    # Skip targets gfx115{0,1} as they not supported by ROCm 6.0.2
    -D CYCLES_HIP_BINARIES_ARCH="gfx900;gfx90c;gfx902;gfx1010;gfx1011;gfx1012;gfx1030;gfx1031;gfx1032;gfx1034;gfx1035;gfx1036;gfx1100;gfx1101;gfx1102;gfx1103"
    -D OCLOC_INSTALL_DIR=/usr
    -D OPTIX_ROOT_DIR="$srcdir"
    -D PYTHON_VERSION="$(_get_pyver)"
    # -D SYCL_CPP_FLAGS=--verbose  # for debugging
    -D SYCL_OFFLINE_COMPILER_PARALLEL_JOBS=8
    -D USD_ROOT_DIR=/usr
    -D WITH_INSTALL_PORTABLE=OFF
    -D WITH_PYTHON_INSTALL=OFF
    -G Ninja
    -S "$pkgname"
    -W no-dev
  )

  case "${CARCH}" in
    x86_64)
      cmake_options+=(
        -D CUDA_HOST_COMPILER="$NVCC_CCBIN"
        -D SYCL_ROOT_DIR=/opt/intel/oneapi/compiler/latest
        -D WITH_CYCLES_OSL=ON
        -D WITH_CYCLES=ON
        -D WITH_CYCLES_EMBREE=ON
        -D WITH_CYCLES_DEVICE_OPTIX=ON
        -D WITH_CYCLES_OSL=ON
      )
    ;;
    *)
      cmake_options+=(
        -D WITH_CYCLES_OSL=OFF
        -D WITH_CYCLES=OFF
        -D WITH_CYCLES_EMBREE=OFF
        -D WITH_CYCLES_DEVICE_OPTIX=OFF
        -D WITH_CYCLES_OS=OFF
      )
    ;;
  esac

  # CUDA arch 90 is unsupported
  echo 'set(CYCLES_CUDA_BINARIES_ARCH sm_52 sm_53 sm_60 sm_61 sm_62 sm_70 sm_72 sm_75 sm_80 sm_86 sm_87 sm_89 compute_89 CACHE STRING "CUDA architectures to build binaries for" FORCE)' > precache
  echo 'mark_as_advanced(CYCLES_CUDA_BINARIES_ARCH)' >> precache

  cmake "${cmake_options[@]}"
  cmake --build build
}

package() {
  DESTDIR="${pkgdir}" cmake --install build
  cd "$pkgname"

  install -Dm755 release/bin/blender-softwaregl "${pkgdir}/usr/bin/blender-softwaregl"
  python -m compileall "${pkgdir}/usr/share/blender"
  python -O -m compileall "${pkgdir}/usr/share/blender"

  install -Dm644 release/freedesktop/org.blender.Blender.metainfo.xml "${pkgdir}/usr/share/metainfo/org.blender.Blender.metainfo.xml"

  case "${CARCH}" in
    x86_64)
      # Move OneAPI AOT lib to proper place
      mv "${pkgdir}"/usr/share/blender/lib/libcycles_kernel_oneapi_aot.so "${pkgdir}"/usr/lib/
    ;;
  esac

  install -vDm 644 doc/license/{BSD-{2,3}-Clause,MIT,Zlib}-license.txt -t "$pkgdir/usr/share/licenses/$pkgname/"
}
