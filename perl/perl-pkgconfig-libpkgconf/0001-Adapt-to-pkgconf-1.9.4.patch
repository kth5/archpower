From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Petr=20P=C3=ADsa=C5=99?= <ppisar@redhat.com>
Date: Thu, 23 Feb 2023 17:12:24 +0100
Subject: [PATCH] Adapt to pkgconf-1.9.4

Squashed commit of the following:

 1. Adapt to pkgconf-1.9.4

    Fixes error handled prototype.
    Adapts to passing flags to file_open.
    Adapts tests to no traling spaces (incompatible change).
    Works around a possible pkgconf regression with trailing null bytes.

    TODO: t/package.t fails on missing shared libs from dependencies.
    TODO: Restore compatibility with older pkgconfs.

 2. Use solver for cflags/libs

    Some t/package.t are fixed now.
    But packages loaded with package_from_file() fails on the solver. See
    t/package.t.

 3. Cache packages loaded from files

    Solver works on cached packages. Packages are cached either manually,
    or by exploring all installation paths. To obtain cflags/libs with the
    solver we need to cache the packages loaded from files.

    Drawbacks:

    (1) pkgconf tool flushed the cache before retrieving nonstatic libs
    ("reset solver when solving for library groups"). I don't understand
    why. I was unable to observe any effect. Because we stash the package
    into a cache, we cannot drop the cache when retrieving the libs. Thus
    this patch removes flushing the cache added in port to 1.9.4.

    (2) The from-file-loaded package poisons the cache. When querying
    other packages, the from-file-loaded package could be included in the
    results. I'm not sure whether the original isolation was good or bad.
    I can imagine someone wants to override a system-provided pkgconfig
    file and thus loads the override from a file.

    Alternatively, we could cache the package loaded from a file
    temporarily just around using the solver. That would narrow the time
    window when the package is in the cache.

 4. Handle a version in solver query

 5. Use solver for list of cflags/libs

    This resolves all the remaining tests.

 6. Restore a trailing space in cflags and libs strings

    pkgconf-1.9 fixed cflags and libs values by removing the trailing
    spaces. However, this consitutes a change in behaviour (people got
    used to concatenate flags) and thus this patch returns the trailing
    spaces.

 7. Make it buildable with pkgconf < 1.9 again

 8. Cache packages loaded from file only temporarily

    This implements an alternative approach outlined in
    d3efe46b52b6ae3defb90cd695e835ebf6d13204 commit.

    This prevents from having packages loaded from files in a client-wide
    cache all the time. The cache is used for resolving cflags/libs.

    A downside is that the code is more complex.

 9. Fix resolving flags for packages with a name different from its identifier

    Alien-Build-2.77 tests revealed a bug in constructing a query for
    pkgconf-1.9 solver: If a package file had file name different from
    a Name value inside the file, the package was able to be found, but
    the flags solver searched for the Name and found nothing.

    Studying pre-pkgconf documentation shows that Name value is only
    a human-oriented display name and a base of the package file name
    should be used instead as a package identifier. This base name is
    stored into an id field of the package structure of pkgconf.

    This patch fixes it by using the id field instead. It also adds a test
    to prevent from future regressions.

Source: https://github.com/PerlAlien/PkgConfig-LibPkgConf/pull/17
---
 LibPkgConf.xs                       | 168 ++++++++++++++++++++--------
 MANIFEST                            |   1 +
 corpus/lib4/bar.pc                  |   4 +
 lib/PkgConfig/LibPkgConf/Package.pm |  16 +--
 t/client.t                          |  14 ++-
 t/package.t                         |   2 +-
 t/simple.t                          |   4 +-
 7 files changed, 149 insertions(+), 60 deletions(-)
 create mode 100644 corpus/lib4/bar.pc

diff --git a/LibPkgConf.xs b/LibPkgConf.xs
index 3afa48320c8f..57e6892996ee 100644
--- a/LibPkgConf.xs
+++ b/LibPkgConf.xs
@@ -3,18 +3,23 @@
 #include "XSUB.h"
 
 #include <libpkgconf/libpkgconf.h>
+#include <stdio.h>
 
 struct my_client_t {
   pkgconf_client_t client;
   FILE *auditf;
   int maxdepth;
   SV *error_handler;
 };
 
 typedef struct my_client_t my_client_t;
 
 static bool
+#if LIBPKGCONF_VERSION >= 10900
+my_error_handler(const char *msg, const pkgconf_client_t *_, void *data)
+#else
 my_error_handler(const char *msg, const pkgconf_client_t *_, const void *data)
+#endif
 {
   dSP;
 
@@ -81,6 +86,93 @@ directory_filter(const pkgconf_client_t *client, const pkgconf_fragment_t *frag,
   return true;
 }
 
+/*
+ * Solve cflags/libs recursively using a pkgconf solver for the given package.
+ * Type encodes cflags/libs/shared/static queried property.
+ * loaded_from_file is true temporarily injecting a loaded-from-file package
+ * into a package cache as pkgconf_queue_solve() operates only on the cache
+ * and packages in a path.
+ * On success returns true and the caller needs to free the filtered_list.
+ * Otherwise, returns false and the filterer_list is still untouched or
+ * already freed.
+ */
+static bool
+solve_flags(pkgconf_pkg_t *package, my_client_t *client, int type,
+      bool loaded_from_file, pkgconf_list_t *filtered_list) {
+#if LIBPKGCONF_VERSION >= 10900
+  pkgconf_pkg_t dep_graph_root = {
+    .id = "",
+    .realname = "",
+    .flags = PKGCONF_PKG_PROPF_VIRTUAL,
+  };
+  char query_string[PKGCONF_BUFSIZE];
+  pkgconf_list_t query = PKGCONF_LIST_INITIALIZER;
+  bool resolved;
+#endif
+  pkgconf_list_t unfiltered_list = PKGCONF_LIST_INITIALIZER;
+  int eflag;
+  int flags;
+  int old_flags;
+
+#if LIBPKGCONF_VERSION >= 10900
+  if (sizeof(query_string) <=
+      snprintf(query_string, sizeof(query_string), "%s = %s",
+      package->id, package->version))
+    false;
+  pkgconf_queue_push(&query, query_string);
+  if (loaded_from_file)
+    loaded_from_file = (NULL == pkgconf_cache_lookup(&client->client, package->id));
+  if (loaded_from_file)
+    pkgconf_cache_add(&client->client, package);
+#endif
+  old_flags = flags = pkgconf_client_get_flags(&client->client);
+  if(type % 2) {
+    flags |= (PKGCONF_PKG_PKGF_MERGE_PRIVATE_FRAGMENTS | PKGCONF_PKG_PKGF_SEARCH_PRIVATE);
+  } else {
+    flags &= ~(PKGCONF_PKG_PKGF_MERGE_PRIVATE_FRAGMENTS | PKGCONF_PKG_PKGF_SEARCH_PRIVATE);
+  }
+  pkgconf_client_set_flags(&client->client, flags);
+#if LIBPKGCONF_VERSION >= 10900
+  resolved = pkgconf_queue_solve(&client->client, &query, &dep_graph_root, client->maxdepth);
+  if (loaded_from_file)
+    pkgconf_cache_remove(&client->client, package);
+  pkgconf_queue_free(&query);
+  if (!resolved) {
+    pkgconf_solution_free(&client->client, &dep_graph_root);
+    false;
+  }
+#endif
+  /*
+   * TODO: attribute for max depth (also in the list version below)
+   */
+  eflag = type > 1
+#if LIBPKGCONF_VERSION >= 10900
+    /* Depth more than 2 duplicates last cflags word. pkgconf hard-codes 2. */
+    ? pkgconf_pkg_cflags(&client->client, &dep_graph_root, &unfiltered_list, 2/*client->maxdepth*/)
+    : pkgconf_pkg_libs(&client->client,   &dep_graph_root, &unfiltered_list, client->maxdepth);
+#else
+    ? pkgconf_pkg_cflags(&client->client, package,         &unfiltered_list, client->maxdepth)
+    : pkgconf_pkg_libs(&client->client,   package,         &unfiltered_list, client->maxdepth);
+#endif
+  pkgconf_client_set_flags(&client->client, old_flags);
+  /*
+   * TODO: throw an exception (also in the list verson below)
+   */
+  if(eflag != PKGCONF_PKG_ERRF_OK) {
+#if LIBPKGCONF_VERSION >= 10900
+    pkgconf_solution_free(&client->client, &dep_graph_root);
+#endif
+    false;
+  }
+  pkgconf_fragment_filter(&client->client, filtered_list, &unfiltered_list, directory_filter, NULL);
+
+  pkgconf_fragment_free(&unfiltered_list);
+#if LIBPKGCONF_VERSION >= 10900
+  pkgconf_solution_free(&client->client, &dep_graph_root);
+#endif
+  return true;
+}
+
 MODULE = PkgConfig::LibPkgConf  PACKAGE = PkgConfig::LibPkgConf::Client
 
 
@@ -240,11 +332,17 @@ _package_from_file(self, filename)
     const char *filename
   INIT:
     FILE *fp;
+    pkgconf_pkg_t *package;
   CODE:
     fp = fopen(filename, "r");
-    if(fp != NULL)
-      RETVAL = PTR2IV(pkgconf_pkg_new_from_file(&self->client, filename, fp));
-    else
+    if(fp != NULL) {
+#if LIBPKGCONF_VERSION >= 10900
+      package = pkgconf_pkg_new_from_file(&self->client, filename, fp, 0);
+#else
+      package = pkgconf_pkg_new_from_file(&self->client, filename, fp);
+#endif
+      RETVAL = PTR2IV(package);
+    } else
       RETVAL = 0;
   OUTPUT:
     RETVAL
@@ -378,96 +476,70 @@ pc_filedir(self)
 
 
 SV *
-_get_string(self, client, type)
+_get_string(self, client, type, loaded_from_file)
     pkgconf_pkg_t *self
     my_client_t *client
     int type
+    bool loaded_from_file
   INIT:
-    pkgconf_list_t unfiltered_list = PKGCONF_LIST_INITIALIZER;
     pkgconf_list_t filtered_list   = PKGCONF_LIST_INITIALIZER;
+    char *buffer;
     size_t len;
-    int eflag;
-    int flags;
-    int old_flags;
     bool escape = true;
   CODE:
-    old_flags = flags = pkgconf_client_get_flags(&client->client);
-    if(type % 2)
-      flags = flags | PKGCONF_PKG_PKGF_MERGE_PRIVATE_FRAGMENTS;
-    pkgconf_client_set_flags(&client->client, flags);
-    /*
-     * TODO: attribute for max depth (also in the list version below)
-     */
-    eflag = type > 1
-      ? pkgconf_pkg_cflags(&client->client, self, &unfiltered_list, client->maxdepth)
-      : pkgconf_pkg_libs(&client->client,   self, &unfiltered_list, client->maxdepth);
-    pkgconf_client_set_flags(&client->client, old_flags);   
-    /*
-     * TODO: throw an exception (also in the list verson below)
-     */
-    if(eflag != PKGCONF_PKG_ERRF_OK)
+    if (!solve_flags(self, client, type, loaded_from_file, &filtered_list))
       XSRETURN_EMPTY;
-    pkgconf_fragment_filter(&client->client, &filtered_list, &unfiltered_list, directory_filter, NULL);
     len = pkgconf_fragment_render_len(&filtered_list, escape, NULL);
     RETVAL = newSV(len == 1 ? len : len-1);
     SvPOK_on(RETVAL);
+    buffer = SvPVX(RETVAL);
+    pkgconf_fragment_render_buf(&filtered_list, buffer, len, escape, NULL);
+    /*
+     * Trim trailing null bytes observed in pkgconf-1.9.4. Probably related to
+     * 648a2249fcb10bf679bdb587ef2bbddaab3023ad pkgconf commit.
+     */
+    while (len > 1 && buffer[len-2] == '\0') len--;
     SvCUR_set(RETVAL, len-1);
-    pkgconf_fragment_render_buf(&filtered_list, SvPVX(RETVAL), len, escape, NULL);
+    /*
+     * Append a space if not already there to mimic pkgconf < 1.9 behaviour.
+     */
+    if (len > 1 && buffer[len-2] != ' ')
+      sv_catpvs(RETVAL, " ");
     pkgconf_fragment_free(&filtered_list);
-    pkgconf_fragment_free(&unfiltered_list);
   OUTPUT:
     RETVAL
 
 
 void
-_get_list(self, client, type)
+_get_list(self, client, type, loaded_from_file)
     pkgconf_pkg_t *self
     my_client_t *client
     int type
+    bool loaded_from_file
   INIT:
-    pkgconf_list_t unfiltered_list = PKGCONF_LIST_INITIALIZER;
     pkgconf_list_t filtered_list   = PKGCONF_LIST_INITIALIZER;
     pkgconf_node_t *node;
     pkgconf_fragment_t *frag;
     int count = 0;
     HV *h;
-    int eflag;
-    int flags;
-    int old_flags;
   CODE:
-    old_flags = flags = pkgconf_client_get_flags(&client->client);
-    if(type % 2)
-      flags = flags | PKGCONF_PKG_PKGF_MERGE_PRIVATE_FRAGMENTS;
-    pkgconf_client_set_flags(&client->client, flags);
-    /*
-     * TODO: attribute for max depth
-     */
-    eflag = type > 1
-      ? pkgconf_pkg_cflags(&client->client, self, &unfiltered_list, client->maxdepth)
-      : pkgconf_pkg_libs(&client->client,   self, &unfiltered_list, client->maxdepth);
-    pkgconf_client_set_flags(&client->client, old_flags);   
-    /*
-     * TODO: throw an exception
-     */
-    if(eflag != PKGCONF_PKG_ERRF_OK)
+    if (!solve_flags(self, client, type, loaded_from_file, &filtered_list))
       XSRETURN_EMPTY;
-    pkgconf_fragment_filter(&client->client, &filtered_list, &unfiltered_list, directory_filter, NULL);
     PKGCONF_FOREACH_LIST_ENTRY(filtered_list.head, node)
     {
       h = newHV();
       frag = node->data;
       if(frag->type)
         hv_store(h, "type", 4, newSVpvf("%c", frag->type), 0);
       else
         hv_store(h, "type",  4, newSVsv(&PL_sv_undef), 0);
       if(frag->data)
         hv_store(h, "data", 4, newSVpv(frag->data, strlen(frag->data)), 0);
       else
         hv_store(h, "data",  4, newSVsv(&PL_sv_undef), 0);
       ST(count++) = newRV_noinc((SV*) h);
     }
     pkgconf_fragment_free(&filtered_list);
-    pkgconf_fragment_free(&unfiltered_list);
     XSRETURN(count);
 
 
diff --git a/MANIFEST b/MANIFEST
index ccea75718681..0a54c8410602 100644
--- a/MANIFEST
+++ b/MANIFEST
@@ -6,6 +6,7 @@ corpus/lib1/foo1a.pc
 corpus/lib2/bar.pc
 corpus/lib2/foo.pc
 corpus/lib3/foo.pc
+corpus/lib4/bar.pc
 INSTALL
 lib/PkgConfig/LibPkgConf.pm
 lib/PkgConfig/LibPkgConf/Client.pm
diff --git a/corpus/lib4/bar.pc b/corpus/lib4/bar.pc
new file mode 100644
index 000000000000..47e52dd12e95
--- /dev/null
+++ b/corpus/lib4/bar.pc
@@ -0,0 +1,4 @@
+Name: foo
+Description: A pkg-config file whose identifier does not match its name
+Version: 1.2.3
+Cflags: -fPIC
diff --git a/lib/PkgConfig/LibPkgConf/Package.pm b/lib/PkgConfig/LibPkgConf/Package.pm
index a5b65bef3879..91985661c86f 100644
--- a/lib/PkgConfig/LibPkgConf/Package.pm
+++ b/lib/PkgConfig/LibPkgConf/Package.pm
@@ -86,117 +86,117 @@ Library flags.  This usually includes things like C<-L/foo/lib> and C<-lfoo>.
 sub libs
 {
   my($self) = @_;
-  $self->_get_string($self->{client}, 0);
+  $self->_get_string($self->{client}, 0, exists $self->{filename});
 }
 
 =head2 libs_static
 
 Static library flags.
 
 =cut
 
 sub libs_static
 {
   my($self) = @_;
-  $self->_get_string($self->{client}, 1);
+  $self->_get_string($self->{client}, 1, exists $self->{filename});
 }
 
 =head2 cflags
 
 Compiler flags.  This usually includes things like C<-I/foo/include> and C<-DFOO=1>.
 
 =cut
 
 sub cflags
 {
   my($self) = @_;
-  $self->_get_string($self->{client}, 2);
+  $self->_get_string($self->{client}, 2, exists $self->{filename});
 }
 
 =head2 cflags_static
 
 Static compiler flags.
 
 =cut
 
 sub cflags_static
 {
   my($self) = @_;
-  $self->_get_string($self->{client}, 3);
+  $self->_get_string($self->{client}, 3, exists $self->{filename});
 }
 
 =head2 list_libs
 
  my @fragments = $package->list_libs;
 
 Library flags as a list of fragments L<PkgConfig::LibPkgConf::Fragment>.  This is similar
 to the C<libs> method above, but since it returns a list instead of a single string, it can
 be used to filter for specific flags.  For example:
 
  # equivalent to pkgconf --libs-only-L
  my @lib_dirs = grep { $_->type eq 'L' } $package->list_libs;
  # equivalent to pkgconf --libs-only-l
  my @libs = grep { $_->type eq 'l' } $package->list_libs;
 
 =cut
 
 sub list_libs
 {
   my($self) = @_;
   require PkgConfig::LibPkgConf::Fragment;
-  map { bless $_, 'PkgConfig::LibPkgConf::Fragment' } $self->_get_list($self->{client}, 0);
+  map { bless $_, 'PkgConfig::LibPkgConf::Fragment' } $self->_get_list($self->{client}, 0, exists $self->{filename});
 }
 
 =head2 list_libs_static
 
  my @fragments = $package->list_libs_static;
 
 Similar to C<list_libs>, but for the static libs flags.
 
 =cut
 
 sub list_libs_static
 {
   my($self) = @_;
   require PkgConfig::LibPkgConf::Fragment;
-  map { bless $_, 'PkgConfig::LibPkgConf::Fragment' } $self->_get_list($self->{client}, 1);
+  map { bless $_, 'PkgConfig::LibPkgConf::Fragment' } $self->_get_list($self->{client}, 1, exists $self->{filename});
 }
 
 =head2 list_cflags
 
  my @fragments = $package->list_cflags;
 
 Compiler flags as a list of fragments L<PkgConfig::LibPkgConf::Fragment>.  This is similar
 to the C<cflags> method above, but since it returns a list instead of a single string, it
 can be used to filter for specific flags.  For example:
 
  # equivalent to pkgconf --cflags-only-I
  my @include_dirs = grep { $_->type eq 'I' } $package->list_cflags;
  # equivalent to pkgconf --cflags-only-other
  my @other_cflags = grep { $_->type ne 'I' } $package->list_cflags;
 
 =cut
 
 sub list_cflags
 {
   my($self) = @_;
   require PkgConfig::LibPkgConf::Fragment;
-  map { bless $_, 'PkgConfig::LibPkgConf::Fragment' } $self->_get_list($self->{client}, 2);
+  map { bless $_, 'PkgConfig::LibPkgConf::Fragment' } $self->_get_list($self->{client}, 2, exists $self->{filename});
 }
 
 =head2 list_cflags_static
 
  my @fragments = $package->list_cflags_static;
 
 Similar to C<list_cflags>, but for the static compiler flags.
 
 =cut
 
 sub list_cflags_static
 {
   my($self) = @_;
   require PkgConfig::LibPkgConf::Fragment;
-  map { bless $_, 'PkgConfig::LibPkgConf::Fragment' } $self->_get_list($self->{client}, 3);
+  map { bless $_, 'PkgConfig::LibPkgConf::Fragment' } $self->_get_list($self->{client}, 3, exists $self->{filename});
 }
 
 =head2 variable
diff --git a/t/client.t b/t/client.t
index 6c80f8312bbb..db115fe14120 100644
--- a/t/client.t
+++ b/t/client.t
@@ -206,7 +206,7 @@ subtest 'path attributes' => sub {
 
   mkpath "$root/$_", 0, 0700 for qw(
     foo bar baz ralph trans formers foo/lib bar/lib trans/lib formers/lib
-    foo/include bar/include trans/include formers/include
+    /foo/include bar/include trans/include formers/include
   );
 
   subtest 'search path' => sub {
@@ -295,4 +295,16 @@ subtest 'global' => sub {
 
 };
 
+subtest 'a package with a different name' => sub {
+
+  my $client = PkgConfig::LibPkgConf::Client->new( path => 'corpus/lib4' );
+
+  is( $client->find('foo'), undef, 'A human-readable name foo is ignored');
+
+  my $pkg = $client->find('bar');
+  isnt( $pkg, undef, 'An identifier bar is found' );
+  is( $pkg->cflags, '-fPIC ', 'Cflags are retrieved' );
+
+};
+
 done_testing;
diff --git a/t/package.t b/t/package.t
index 8da6efb8ef5d..486f6c43b429 100644
--- a/t/package.t
+++ b/t/package.t
@@ -146,7 +146,7 @@ subtest 'filte sys' => sub {
   
   my $pkg = $client->find('foo');
 
-  is $pkg->libs,   '-lfoo ', 'libs';  
+  is $pkg->libs,   '-lfoo ', 'libs';
   is $pkg->cflags, '-fPIC ', 'cflags';
 
 };
diff --git a/t/simple.t b/t/simple.t
index c10662083f3f..3d07feedbbea 100644
--- a/t/simple.t
+++ b/t/simple.t
@@ -31,8 +31,8 @@ subtest 'static' => sub {
 
   local $ENV{PKG_CONFIG_PATH} = 'corpus/lib3';
   
-  is pkgconf_cflags_static('foo'), '-I/test/include/foo -DFOO_STATIC ', 'cflags';  
-  is pkgconf_libs_static('foo'), '-L/test/lib -lfoo -lbar -lbaz ', 'libs';  
+  is pkgconf_cflags_static('foo'), '-I/test/include/foo -DFOO_STATIC ', 'cflags';
+  is pkgconf_libs_static('foo'), '-L/test/lib -lfoo -lbar -lbaz ', 'libs';
 
 };
 
